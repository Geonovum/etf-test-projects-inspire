<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="INSPIRE Download Service Atom TG 3_1" resourceRoot="${projectDir}" soapui-version="4.6.4" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="etf-sel.modelBridge" id="4256e5f6-5bc6-4bbc-9731-18a958f34676" xmlns:con="http://eviware.com/soapui/config"><con:description>This test project checks an implementation of Atom feeds to the requirements that the INSPIRE Download Service Technical Guidance (TG version 3.1) lays down. It tests for mandatory and optional parts.</con:description><con:settings/><con:testSuite name="TestSetup" id="6266de5b-169b-4933-896b-803260ff568e"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Requirements" searchProperties="true" id="10459be8-f9d8-4c7b-bceb-bb965f302107"><con:settings/><con:testStep type="groovy" name="Requirements" id="4289067c-476d-4f45-ad91-d105b048b95e" disabled="true"><con:settings/><con:config><script/></con:config></con:testStep><con:properties><con:property><con:name>M-01__Name</con:name><con:value>ATOM Service Feed elements</con:value></con:property><con:property><con:name>M-01__Description</con:name><con:value>Test the ATOM Service feed on INSPIRE TG requirements</con:value></con:property><con:property><con:name>M-01##req3-GeoRSSXSD__Name</con:name><con:value>Valid GeoRSS</con:value></con:property><con:property><con:name>M-01##req3-GeoRSSXSD__Description</con:name><con:value>Validate to GeoRSS XSD</con:value></con:property><con:property><con:name>M-01##req3-GeoRSSXSD__Reference</con:name><con:value>TG Requirement 3</con:value></con:property><con:property><con:name>M-01##req5-FeedTitle__Name</con:name><con:value>Feed Title exists</con:value></con:property><con:property><con:name>M-01##req5-FeedTitle__Description</con:name><con:value>Feed Title exists</con:value></con:property><con:property><con:name>M-01##req5-FeedTitle__Reference</con:name><con:value>TG Requirement 5</con:value></con:property><con:property><con:name>M-01##req6-ServiceMDLink__Name</con:name><con:value>Feed Service Metadata Link exists</con:value></con:property><con:property><con:name>M-01##req6-ServiceMDLink__Description</con:name><con:value>Feed Service Metadata Link exists</con:value></con:property><con:property><con:name>M-01##req6-ServiceMDLink__Reference</con:name><con:value>TG Requirement 6</con:value></con:property><con:property><con:name>M-01##req7-FeedSelfLink__Name</con:name><con:value>Feed self link</con:value></con:property><con:property><con:name>M-01##req7-FeedSelfLink__Description</con:name><con:value>The feed link to self exists and has a proper language reference </con:value></con:property><con:property><con:name>M-01##req7-FeedSelfLink__Reference</con:name><con:value>TG Requirement 7</con:value></con:property><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:28:55.516+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:28:55.518+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value/></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property><con:property><con:name>M-01##req8__Name</con:name><con:value>Link to OpenSearch Description Document</con:value></con:property><con:property><con:name>M-01##req8__Description</con:name><con:value>Feed link to OpenSearch Description Document exists</con:value></con:property><con:property><con:name>M-01##req8__Reference</con:name><con:value>TG Requirement 8</con:value></con:property><con:property><con:name>M-01##req9__Name</con:name><con:value>Feed id same as self URL</con:value></con:property><con:property><con:name>M-01##req9__Description</con:name><con:value>The service feed id is the same as the self URL</con:value></con:property><con:property><con:name>M-01##req9__Reference</con:name><con:value>TG Requirement 9</con:value></con:property><con:property><con:name>M-01##req10__Name</con:name><con:value>Feed contains rights information</con:value></con:property><con:property><con:name>M-01##req10__Description</con:name><con:value>Feed contains rights information</con:value></con:property><con:property><con:name>M-01##req10__Reference</con:name><con:value>TG Requirement 10</con:value></con:property><con:property><con:name>M-01##req11__Name</con:name><con:value>Feed contains updated information</con:value></con:property><con:property><con:name>M-01##req11__Description</con:name><con:value>Feed contains updated information</con:value></con:property><con:property><con:name>M-01##req11__Reference</con:name><con:value>TG Requirement 11</con:value></con:property><con:property><con:name>M-01##req12__Name</con:name><con:value>Feed contains author name and email address</con:value></con:property><con:property><con:name>M-01##req12__Description</con:name><con:value>Feed contains author name and email address</con:value></con:property><con:property><con:name>M-01##req12__Reference</con:name><con:value>TG Requirement 12</con:value></con:property><con:property><con:name>M-01##req13a__Name</con:name><con:value>Each entry has an element INSPIRE identifier code</con:value></con:property><con:property><con:name>M-01##req13a__Description</con:name><con:value>Each entry has an element INSPIRE identifier code</con:value></con:property><con:property><con:name>M-01##req13a__Reference</con:name><con:value>TG Requirement 13</con:value></con:property><con:property><con:name>M-01##req13b__Name</con:name><con:value>Each entry has an element INSPIRE identifier namespace</con:value></con:property><con:property><con:name>M-01##req13b__Description</con:name><con:value>Each entry has an element INSPIRE identifier namespace</con:value></con:property><con:property><con:name>M-01##req13b__Reference</con:name><con:value>TG Requirement 13</con:value></con:property><con:property><con:name>M-01##req14__Name</con:name><con:value>Each entry has a valid Dataset metadata link, referring to a file of type 'application/xml'</con:value></con:property><con:property><con:name>M-01##req14__Description</con:name><con:value>Each entry has a valid Dataset metadata link, referring to a file of type 'application/xml'</con:value></con:property><con:property><con:name>M-01##req14__Reference</con:name><con:value>TG Requirement 14</con:value></con:property><con:property><con:name>M-01##req15__Name</con:name><con:value>Each entry has exactly one Dataset Feed link</con:value></con:property><con:property><con:name>M-01##req15__Description</con:name><con:value>Each entry has exactly one Dataset Feed link</con:value></con:property><con:property><con:name>M-01##req15__Reference</con:name><con:value>TG Requirement 15</con:value></con:property><con:property><con:name>M-01##req16a__Name</con:name><con:value>Each entry has an id</con:value></con:property><con:property><con:name>M-01##req16a__Description</con:name><con:value>Each entry has an id</con:value></con:property><con:property><con:name>M-01##req16a__Reference</con:name><con:value>TG Requirement 16</con:value></con:property><con:property><con:name>M-01##req16b__Name</con:name><con:value>Each entry's id is a URI</con:value></con:property><con:property><con:name>M-01##req16b__Description</con:name><con:value>Each entry's id is a URI</con:value></con:property><con:property><con:name>M-01##req16b__Reference</con:name><con:value>TG Requirement 16</con:value></con:property><con:property><con:name>M-01##req17__Name</con:name><con:value>Each entry has a title</con:value></con:property><con:property><con:name>M-01##req17__Description</con:name><con:value>Each entry has a title</con:value></con:property><con:property><con:name>M-01##req17__Reference</con:name><con:value>TG Requirement 17</con:value></con:property><con:property><con:name>M-01##req18__Name</con:name><con:value>Each entry has an element updated</con:value></con:property><con:property><con:name>M-01##req18__Description</con:name><con:value>Each entry has an element updated</con:value></con:property><con:property><con:name>M-01##req18__Reference</con:name><con:value>TG Requirement 18</con:value></con:property><con:property><con:name>M-01##req19__Name</con:name><con:value>Each entry has an element category, including a term and label, to refer to CRSs.</con:value></con:property><con:property><con:name>M-01##req19__Description</con:name><con:value>Each entry has an element category, including a term and label, to refer to CRSs.</con:value></con:property><con:property><con:name>M-01##req19__Reference</con:name><con:value>TG Requirement 19</con:value></con:property><con:property><con:name>M-04##req20__Name</con:name><con:value>Feed title exists</con:value></con:property><con:property><con:name>M-04##req20__Description</con:name><con:value>Feed title exists</con:value></con:property><con:property><con:name>M-04##req20__Reference</con:name><con:value>TG Requirement 20</con:value></con:property><con:property><con:name>M-04##req21__Name</con:name><con:value>Feed id refers to self URL</con:value></con:property><con:property><con:name>M-04##req21__Description</con:name><con:value>Feed id refers to self URL</con:value></con:property><con:property><con:name>M-04##req21__Reference</con:name><con:value>TG Requirement 21</con:value></con:property><con:property><con:name>M-04##req22__Name</con:name><con:value>Feed rights element exists</con:value></con:property><con:property><con:name>M-04##req22__Description</con:name><con:value>Feed rights element exists</con:value></con:property><con:property><con:name>M-04##req22__Reference</con:name><con:value>TG Requirement 22</con:value></con:property><con:property><con:name>M-04##req23__Name</con:name><con:value>Feed updated element exists and contains a date and time</con:value></con:property><con:property><con:name>M-04##req23__Description</con:name><con:value>Feed updated element exists and contains a date and time</con:value></con:property><con:property><con:name>M-04##req23__Reference</con:name><con:value>TG Requirement 23</con:value></con:property><con:property><con:name>M-04##req24__Name</con:name><con:value>Feed contains an author name and email address</con:value></con:property><con:property><con:name>M-04##req24__Description</con:name><con:value>Feed contains an author name and email address</con:value></con:property><con:property><con:name>M-04##req24__Reference</con:name><con:value>TG Requirement 24</con:value></con:property><con:property><con:name>M-04##req25-28-31__Name</con:name><con:value>Feed contains at least one entry for data, with a link to the dataset and length set or a section link in case of multiple files.</con:value></con:property><con:property><con:name>M-04##req25-28-31__Description</con:name><con:value>Feed contains at least one entry for data, with a link to the dataset and length set or a section link in case of multiple files.</con:value></con:property><con:property><con:name>M-04##req25-28-31__Reference</con:name><con:value>TG Requirement 25, 28, 31</con:value></con:property><con:property><con:name>M-04##req26a__Name</con:name><con:value>Dataset feeds contain seperate entries for each format/CRS combination.</con:value></con:property><con:property><con:name>M-04##req26a__Description</con:name><con:value>Dataset feeds contain seperate entries for each format/CRS combination. Each entry link for download has one / the same (media)type</con:value></con:property><con:property><con:name>M-04##req26a__Reference</con:name><con:value>TG Requirement 26</con:value></con:property><con:property><con:name>M-04##req26b__Name</con:name><con:value>Dataset feeds contain seperate entries for each format/CRS combination. Each entry has the same CRS category elements</con:value></con:property><con:property><con:name>M-04##req26b__Description</con:name><con:value>Dataset feeds contain seperate entries for each format/CRS combination. Each entry has the same CRS category elements</con:value></con:property><con:property><con:name>M-04##req26b__Reference</con:name><con:value>TG Requirement 26</con:value></con:property><con:property><con:name>M-04##req27__Name</con:name><con:value>Feed contains at least one link to Spatial Object descriptions</con:value></con:property><con:property><con:name>M-04##req27__Description</con:name><con:value>Feed contains at least one link to Spatial Object descriptions (in text/html)</con:value></con:property><con:property><con:name>M-04##req27__Reference</con:name><con:value>TG Requirement 27</con:value></con:property><con:property><con:name>M-04##req31__Name</con:name><con:value>If a section link is provided (for multiple files) then there should be more than 1 section link</con:value></con:property><con:property><con:name>M-04##req31__Description</con:name><con:value>If a section link is provided (for multiple files) then there should be more than 1 section link</con:value></con:property><con:property><con:name>M-04##req31__Reference</con:name><con:value>TG Requirement 31</con:value></con:property><con:property><con:name>M-04##req32__Name</con:name><con:value>If multiple files are provided, then the links shall be of rel='section' and there shall be a content element or alternate link as a description</con:value></con:property><con:property><con:name>M-04##req32__Description</con:name><con:value>If multiple files are provided, then the links shall be of rel='section' and there shall be a content element or alternate link as a description</con:value></con:property><con:property><con:name>M-04##req32__Reference</con:name><con:value>TG Requirement 32</con:value></con:property><con:property><con:name>M-04##req34__Name</con:name><con:value>Only media types listed in the INSPIRE media-types register shall be used.</con:value></con:property><con:property><con:name>M-04##req34__Description</con:name><con:value>Only media types listed in the INSPIRE media-types register at http://inspire.ec.europa.eu/media-types/ shall be used.</con:value></con:property><con:property><con:name>M-04##req34__Reference</con:name><con:value>TG Requirement 34</con:value></con:property><con:property><con:name>M-04##req35__Name</con:name><con:value>Each entry shall have an element category for the CRS</con:value></con:property><con:property><con:name>M-04##req35__Description</con:name><con:value>Each entry shall have an element category for the CRS</con:value></con:property><con:property><con:name>M-04##req35__Reference</con:name><con:value>TG Requirement 35</con:value></con:property><con:property><con:name>M-04##AtomLinkSelf__Name</con:name><con:value>Feed link to self exists and has proper language references</con:value></con:property><con:property><con:name>M-04##AtomLinkSelf__Description</con:name><con:value>Feed link to self exists and has proper language references</con:value></con:property><con:property><con:name>M-04##AtomLinkSelf__Reference</con:name><con:value>ATOM specification</con:value></con:property><con:property><con:name>M-05##req39__Name</con:name><con:value>OpenSearchDescription contains URL reference to itself(XQuery)</con:value></con:property><con:property><con:name>M-05##req39__Description</con:name><con:value>OpenSearchDescription contains URL reference to itself(XQuery)</con:value></con:property><con:property><con:name>M-05##req39__Reference</con:name><con:value>TG Requirement 39</con:value></con:property><con:property><con:name>M-05##req40__Name</con:name><con:value>OpenSearchDescription contains a template URL for generic search queries</con:value></con:property><con:property><con:name>M-05##req40__Description</con:name><con:value>OpenSearchDescription contains a template URL for generic search queries</con:value></con:property><con:property><con:name>M-05##req40__Reference</con:name><con:value>TG Requirement 40</con:value></con:property><con:property><con:name>M-05##req41__Name</con:name><con:value>OpenSearchDescription contains a Url element that describes a template URL for the Describe Spatial Data Set operation</con:value></con:property><con:property><con:name>M-05##req41__Description</con:name><con:value>OpenSearchDescription contains a Url element that describes a template URL for the Describe Spatial Data Set operation</con:value></con:property><con:property><con:name>M-05##req41__Reference</con:name><con:value>TG Requirement 41</con:value></con:property><con:property><con:name>M-05##req42__Name</con:name><con:value>OpenSearchDescription contains a Url element that describes a template URL for the Get Spatial Data Set operation</con:value></con:property><con:property><con:name>M-05##req42__Description</con:name><con:value>OpenSearchDescription contains a Url element that describes a template URL for the Get Spatial Data Set operation</con:value></con:property><con:property><con:name>M-05##req42__Reference</con:name><con:value>TG Requirement 42</con:value></con:property><con:property><con:name>M-05##req43__Name</con:name><con:value>the OpenSearchDescription contains 'Query' examples with 'spatial_dataset_identifier_code' and 'spatial_dataset_identifier_namespace' attributes</con:value></con:property><con:property><con:name>M-05##req43__Description</con:name><con:value>the OpenSearchDescription contains 'Query' examples with 'spatial_dataset_identifier_code' and 'spatial_dataset_identifier_namespace' attributes</con:value></con:property><con:property><con:name>M-05##req43__Reference</con:name><con:value>TG Requirement 43</con:value></con:property><con:property><con:name>M-02##serviceIdentification__Name</con:name><con:value>Service metadata contains ServiceIdentification</con:value></con:property><con:property><con:name>M-02##serviceIdentification__Description</con:name><con:value>Service metadata contains ServiceIdentification</con:value></con:property><con:property><con:name>M-02##serviceIdentification__Reference</con:name><con:value>ISO Metadata Standard ISO19119/19139</con:value></con:property><con:property><con:name>M-02##serviceIdentificationDatasetRef__Name</con:name><con:value>Service metadata contains at least one dataset reference (operatesOn)</con:value></con:property><con:property><con:name>M-02##serviceIdentificationDatasetRef__Description</con:name><con:value>Service metadata contains at least one dataset reference (operatesOn)</con:value></con:property><con:property><con:name>M-02##serviceIdentificationDatasetRef__Reference</con:name><con:value>ISO Metadata Standard ISO19119/19139</con:value></con:property><con:property><con:name>M-03##MD_Metadata__Name</con:name><con:value>Metadata has root element MD_Metadata</con:value></con:property><con:property><con:name>M-03##MD_Metadata__Description</con:name><con:value>Metadata has root element MD_Metadata</con:value></con:property><con:property><con:name>M-03##MD_Metadata__Reference</con:name><con:value>ISO Metadata Standard ISO19119/19139, INSPIRE Metadata Regulation</con:value></con:property><con:property><con:name>M-03##fileIdentifierDataset__Name</con:name><con:value>Metadata fileIdentifier exists</con:value></con:property><con:property><con:name>M-03##fileIdentifierDataset__Description</con:name><con:value>Metadata fileIdentifier exists</con:value></con:property><con:property><con:name>M-03##fileIdentifierDataset__Reference</con:name><con:value>INSPIRE Metadata Regulation</con:value></con:property><con:property><con:name>M-03##identifierInServiceMD__Name</con:name><con:value>The MD_Identifier exists in the ServiceMetadata</con:value></con:property><con:property><con:name>M-03##identifierInServiceMD__Description</con:name><con:value>The MD_Identifier exists in the ServiceMetadata. This is necessarry for a working infrastructure. The service metadata must provide references to dataset metadata, through these identifiers</con:value></con:property><con:property><con:name>M-05##OSD_AtomReponse__Name</con:name><con:value>Response is Atom feed with at least one category with a CRS</con:value></con:property><con:property><con:name>M-05##OSD_AtomReponse__Description</con:name><con:value>Response of a OpenSearch DescribeDataset URL is Atom feed with at least one category with a CRS</con:value></con:property><con:property><con:name>M-05##OSD_AtomReponse__Reference</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Transfer Global Properties" searchProperties="true" id="bb8df909-494c-46d8-ace0-31e18b57b12f"><con:settings/><con:testStep type="transfer" name="Transfer Global Properties" id="2dd69010-0ad5-4321-b230-17aca1fe8e02"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="false" ignoreEmpty="true" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="true"><con:name>endPoint</con:name><con:sourceType>DS.serviceEndpoint</con:sourceType><con:sourceStep>#Global#</con:sourceStep><con:targetType>serviceEndpoint</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" disabled="false" entitize="false" ignoreEmpty="true" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>basicAuthUser</con:name><con:sourceType>DS.basicAuthUser</con:sourceType><con:sourceStep>#Global#</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>authUser</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" disabled="false" entitize="false" ignoreEmpty="true" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>basicAuthPwd</con:name><con:sourceType>DS.basicAuthPwd</con:sourceType><con:sourceStep>#Global#</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>authPwd</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:28:55.523+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:28:55.523+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value/></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Credentials" searchProperties="true" id="d47e2c7e-031b-4ce1-a689-dbc207a2791d"><con:settings/><con:testStep type="groovy" name="Update Credentials" id="4bafa73e-73b8-4153-a84b-c6cc0b04bd28"><con:settings/><con:config><script>import de.interactive_instruments.xtf.Util;

/** Set the credentials only if a username is provided */
def basicAuthUser = context.expand('${#Project#authUser}');
if (basicAuthUser.length()>0) {
	log.info("Setting credentials for user: " + basicAuthUser);
}
Util.updateCredentials(testRunner);
</script></con:config></con:testStep><con:properties><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:28:55.524+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:28:55.524+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value/></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite name="M-01 Service Feed" id="0af18529-fba3-4b30-8235-0e7bbff486a1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feed Elements Mandatory" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c8d8a92e-b829-4c07-9b4e-96a9d2b5f18c"><con:settings/><con:testStep type="httprequest" name="ValidateServiceFeed" id="98440512-070d-4516-b3f3-31ee9b38df05"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="ValidateServiceFeed" id="5a31d80c-3b68-4eec-80d2-58dc18272a31" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-01##req5-FeedTitle: Req 5 Feed Title exists" id="8aee491b-0419-45d1-b438-53011f63a3d0"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $title:=/atom:feed/atom:title
return
if (string-length($title)=0)
then "The Atom feed does NOT contain a Feed Title."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req6-ServiceMDLink: Req 6 Feed Service Metadata link exists" id="5b8d1757-3fc2-4024-94c6-16b7be712d89"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $mdurl:=/atom:feed/atom:link[@rel='describedby' and (@type='application/xml' or @type='application/vnd.iso.19139+xml' or @type='application/vnd.ogc.csw.GetRecordByIdResponse_xml')]/@href
return
if (string-length($mdurl)=0)
then "The Atom feed does NOT contain a link to a service metadata document. Check the element /atom:feed/atom:link."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req7-FeedSelfLink: Req 7 Feed link to self exists and has proper language references" id="2c1f1f65-62a3-4b38-9b95-c6ff94cb415f"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $linkself:=/atom:feed/atom:link[@rel='self' and @type='application/atom+xml' and @hreflang=//atom:feed/atom:title/@xml:lang]/@href
return
if ($linkself='${#Project#serviceEndpoint}')
then ""
else "The Atom feed does NOT contain a link to itself including a language reference. Check the element /atom:feed/atom:link with @rel='self'."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req8: Req 8 Feed link to OpenSearch Description Document exists" id="c6d8b8d9-ec03-45ba-960d-e6e2789ed21a"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $linkosd:=/atom:feed/atom:link[@rel='search' and @type='application/opensearchdescription+xml']/@href
return
if (string-length($linkosd)=0)
then "The Atom feed does NOT contain a link to an OpenSearch Description document."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req9: Req 9 Feed id refers to self URL" id="658d87ef-f227-4bdc-8b81-2cb8e0d3e271"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $atomid:=/atom:feed/atom:id
return
if ($atomid!='${#Project#serviceEndpoint}')
then "The Atom feed id element does NOT refer to the self URL."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req10: Req 10 Feed contains rights information" id="b81062f5-3b0d-4477-9483-aa08d8ccdff4"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $rights:=/atom:feed/atom:rights
return
if (string-length($rights)=0)
then "The Atom feed does NOT contain rights information."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req11: Req 11 Feed contains updated information" id="08865ae5-6938-4849-8177-812417249554"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $updated:=year-from-dateTime(xs:dateTime(/atom:feed/atom:updated))
return
if ($updated > 0)
then ""
else "The Atom feed does NOT contain updated information."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req12: Req 12 Feed contains author name and email address" id="5f03ff6d-8c88-4f00-9bca-1d1cbfc53b6f"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $author:=/atom:feed/atom:author[string-length(./atom:name)>0 and string-length(./atom:email)>0]
return
if (exists($author))
then ""
else "The Atom feed does NOT contain an author name and/or email address."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req13a: Each entry has an element INSPIRE identifier code" id="77d3e60a-c17d-46be-a678-7dbfab73ba92"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where string-length($entry/inspire_dls:spatial_dataset_identifier_code)=0
return 
concat ("Entry: ",$entry/atom:id," has no inspire_dls:spatial_dataset_identifier_code. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req13b: Each entry has an element INSPIRE identifier element namespace" id="5fcaddd7-6aca-488a-8714-c917e9f6dd6e"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where string-length($entry/inspire_dls:spatial_dataset_identifier_namespace)=0
return 
concat ("Entry: ",$entry/atom:id," has no inspire_dls:spatial_dataset_identifier_namespace. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req14: Each entry has a valid Dataset metadata link, referring to a file of type 'application/xml'" id="142a5955-a694-4f59-9fcc-18613289f499"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where string-length($entry/atom:link[@rel='describedby' and @type='application/xml']/@href)=0
return 
concat ("Entry: ",$entry/atom:id," has no Dataset metadata link with type 'application/xml'. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req15: Each entry has exactly one Dataset Feed link" id="43f06ea2-2ea2-4dea-8f63-6fba91af3c5c"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where count($entry/atom:link[@rel='alternate' and @type='application/atom+xml'])!=1
return 
concat ("Entry: ",$entry/atom:id," has ",count(./atom:link[@rel='alternate' and @type='application/atom+xml'])," Dataset feed links, but it should be exactly 1 Dataset feed link. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req16a: Each entry has an id" id="536dca9e-1478-4387-99c6-67a808eed0fe"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where string-length($entry/atom:id)=0
return 
concat ("Entry with title: ",$entry/atom:title," has no identifier.")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req16b: Each entry's id is a URI" id="fe5c7645-1914-46a1-9a03-0cbceb5bbda3"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where substring($entry/atom:id,1,4)!='http'
return 
concat ("The entry with title: ",$entry/atom:title," has no URI as identifier, but is: ",$entry/atom:id, ". ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req17: Each entry has a title" id="bd6b11d4-7fd5-46c4-a3e5-ac379feabc32"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where string-length($entry/atom:title)=0
return 
concat ("The entry with id: ",$entry/atom:id," has no title. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req18: Each entry has an element updated" id="ca754390-e149-4c45-9278-2b9e44813bfd"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where year-from-dateTime(xs:dateTime($entry/atom:updated)) &lt;=0 
return 
concat ("The entry with id: ",$entry/atom:id," has no element updated. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##req19: Each entry has an element category, including a term and label, to refer to CRSs." id="68f4751f-21df-4ad9-820c-79913c27a725"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where count($entry/atom:category[string-length(@term)>0 and string-length(@label)>0])&lt;1
return 
concat ("The entry with id: ",$entry/atom:id," has no category element inlcuding a term and label to refer to CRSes. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransferService" id="d1c02700-00ca-41e5-938f-bd3b8a3edc72"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>serviceMetadataUrl</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>ValidateServiceFeed</con:sourceStep><con:sourcePath>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

/atom:feed/atom:link[@rel='describedby' and (@type='application/vnd.iso.19139+xml' or @type='application/vnd.ogc.csw.GetRecordByIdResponse_xml')][1]/@href</con:sourcePath><con:targetType>serviceMetadataUrl</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>serviceFeedXml</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>ValidateServiceFeed</con:sourceStep><con:sourcePath/><con:targetType>serviceFeedXml</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>openSearchDescriptionUrl</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>ValidateServiceFeed</con:sourceStep><con:sourcePath>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

/atom:feed/atom:link[@rel='search' and @type='application/opensearchdescription+xml']/@href</con:sourcePath><con:targetType>openSearchDescriptionUrl</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../logs/traces/</con:value></con:property><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>ValidateServiceFeed</con:value></con:property><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:28:55.526+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:28:55.526+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value>M-01###M-01##req8</con:value></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>etf.AssociatedRequirements</con:name><con:value>M-01</con:value></con:property></con:properties></con:testSuite><con:testSuite name="M-02 Service Feed Service Metadata" id="83d249bd-b00d-464d-8d37-60e4ef59febf"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Service Metadata Mandatory" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a37629ff-b17f-46f4-8b3c-cb1dc39b9436"><con:settings/><con:testStep type="groovy" name="CleanupAuthorization" id="b17739ce-14f5-411f-846f-a9dc578ca792"><con:settings/><con:config><script>//import com.eviware.soapui.support.types.StringToStringsMap;
//
//def reqName = "GetServiceMetadata"
//// remove any Authorization header if provided for the service (because this request is for metadata)
//def newheaders = new StringToStringsMap()
//def header = testRunner.testCase.testSteps[reqName].httpRequest.getRequestHeaders()
// header.each
// {
//  if (key!="Authorization") {
//       newheaders.put(key,val)
//  }
// }
//testRunner.testCase.testSteps[reqName].getHttpRequest().setRequestHeaders(newheaders);</script></con:config></con:testStep><con:testStep type="httprequest" name="GetServiceMetadata" id="e69ce56b-735d-4309-817f-dbfd93f51c3b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetServiceMetadata" id="1cb95c21-b5eb-403f-8398-012a632921db" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceMetadataUrl}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-02##serviceIdentification: Service metadata contains ServiceIdentification" id="7ffb79cc-0b1a-4a44-a89c-570ce67b37c1"><con:configuration><path>declare namespace srv='http://www.isotc211.org/2005/srv';
declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $value:=//srv:SV_ServiceIdentification
return
if (exists($value))
then ""
else "the referred service Metadata document does not seem to be INSPIRE Service Metadata. It does not have an XML element srv:ServiceIdentififcation. Check the metadata document."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-02##serviceIdentificationDatasetRef: Service metadata contains at least one dataset reference (operatesOn)" id="d1a366b1-25e8-4fe0-ad65-6ff06a82b60c"><con:configuration><path>declare namespace srv='http://www.isotc211.org/2005/srv';
declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $value:=//srv:operatesOn/@uuidref
return
if (exists($value))
then ""
else "the service metadata does not contain a dataset reference (operatesOn). Check the metadata document."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result>
</content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="c049cd90-413c-4886-a3d7-82f90e461d7f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>mdIdentifierslist</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetServiceMetadata</con:sourceStep><con:sourcePath>declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace srv='http://www.isotc211.org/2005/srv';
declare namespace gco='http://www.isotc211.org/2005/gco';
string-join(//srv:operatesOn/@uuidref,',')</con:sourcePath><con:targetType>MdIdentifiersList</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../logs/traces/</con:value></con:property><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetServiceMetadata</con:value></con:property><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:28:57.108+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:28:57.108+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value/></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>etf.AssociatedRequirements</con:name><con:value>M-02</con:value></con:property></con:properties></con:testSuite><con:testSuite name="M-03 Service Feed Dataset Metadata" id="2c7ceadb-48aa-45ff-91c4-c42ef62d86a0"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Dataset Metadata Mandatory" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4b721728-ab13-4f0c-bad2-ffa12be55ae8"><con:settings/><con:testStep type="properties" name="Transfer_Properties" id="5dcdced7-2a23-4db0-9d30-2585f477a47c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>urlToTest</con:name><con:value/></con:property><con:property><con:name>urlToTestEncoded</con:name><con:value/></con:property><con:property><con:name>serviceFeedXml</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="GetServiceFeed" id="b645f8ff-b793-4104-8d39-692facd433d5"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetServiceFeed" id="3931452d-bf15-41a4-98b2-7406eaadb41f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-01##req14: Each entry has a valid Dataset metadata link, referring to a file of type 'application/xml'" id="63400d72-10b4-4606-a5cd-8077e8cfae6f"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where string-length($entry/atom:link[@rel='describedby' and @type='application/xml']/@href)=0
return 
concat ("Entry: ",$entry/atom:id," has no Dataset metadata link with type 'application/xml'. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5cd27ea2-7978-4207-8ed4-a93d600edeb9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>serviceFeedXml</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetServiceFeed</con:sourceStep><con:targetType>serviceFeedXml</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="RunMetadataDatasetTest" id="0b7a322b-c58f-4594-ba8d-af38163d1f0e"><con:settings/><con:config><script>// import de.interactive_instruments.xtf.*;
// SOAPUI_I.init(log,context,testRunner);

// ProjectHelper ph = new ProjectHelper();
// def serviceFeedXmlHolder = ph.getTransferPropertyAsXml("serviceFeedXml")


props = testRunner.testCase.testSteps['Transfer_Properties']
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def serviceFeedXmlHolder = groovyUtils.getXmlHolder(props.getPropertyValue("serviceFeedXml"))

//Pull out the metadataURLs
def metadataUrlNodes = serviceFeedXmlHolder.getNodeValues("//*:entry/*:link[@rel='describedby' and @type='application/xml']/@*:href");
log.info("metadataUrlNodes: " + metadataUrlNodes);

// clear url to test
// ph.setTransferProperty("urlToTest","")
// ph.setTransferProperty("mdIdentifiersDatasetMetadata",'');

props.setPropertyValue("urlToTest",testRunner.testCase.testSuite.project.getPropertyValue("serviceEndpoint"))
props.setPropertyValue("mdIdentifiersDatasetMetadata",'');


// run GetMetadata test for each url
for( url in metadataUrlNodes ) {
	
   url=url.replaceAll("%7B","{")
   url=url.replaceAll("%7D","}")
   props.setPropertyValue("urlToTest",url)
   testRunner.runTestStepByName("GetMetadata")
   testRunner.runTestStepByName("PropertyTransferMD_Identifier")
}</script></con:config></con:testStep><con:testStep type="httprequest" name="GetMetadata" id="a3ac5286-332c-46ef-a34e-844a8b675a96"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetMetadata" id="4533a0ea-220f-44ed-bae1-71657674c1d6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#urlToTest}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-03##MD_Metadata: Metadata has root element MD_Metadata" id="791bab28-4b99-4904-8da6-23c8d4b781c8"><con:configuration><path>declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace csw='http://www.opengis.net/cat/csw/2.0.2';

&lt;result>AssertionFailures:
{
let $value:=//gmd:MD_Metadata
return
if (exists($value))
then ""
else "the referred dataset Metadata document does not seem to be ISO Metadata. It does not have an XML element gmd:Metadata. Check the URL in the MetadataURL of the layer. URL: '${#urlToTestEncoded}'"
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-03##fileIdentifierDataset: Metadata fileIdentifier exists" id="1c758d06-90f8-4303-98b4-e9240a654378"><con:configuration><path>declare namespace gmd='http://www.isotc211.org/2005/gmd';

&lt;result>AssertionFailures:
{
let $fileIdentifier:=//gmd:MD_Metadata/gmd:fileIdentifier
return 
if (string-length($fileIdentifier)=0)
then "there is no fileIdentifier defined in the Metadata."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-03##identifierInServiceMD: The MD_Identifier exists in the ServiceMetadata" id="2b22d662-9c6c-4f88-8b81-c280fd111a7d"><con:configuration><path>declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace gco='http://www.isotc211.org/2005/gco';

&lt;result>AssertionFailures:
{
let $id:=//gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString
return
if (contains('${#Project#MdIdentifiersList}', $id))
then ""
else concat("the MD_Identifier ",$id," does not exist in the service metadata. The MD_identifier is found in the metadata document at URL: '${#urlToTestEncoded}'. The service metadata refers to these identifiers: '${#Project#MdIdentifiersList}'")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result>
</content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransferMD_Identifier" id="755c1b08-b24d-4dd4-839a-efed47e79dc2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>addMD_IdentiferToList</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetMetadata</con:sourceStep><con:sourcePath>declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace gco='http://www.isotc211.org/2005/gco';

string-join(('${#Project#mdIdentifiersDatasetMetadata}',//gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString),',')</con:sourcePath><con:targetType>mdIdentifiersDatasetMetadata</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="CompareDatasetIdentifiers" id="e2e532a9-132b-4848-bbf4-bef4dc98e680"><con:settings/><con:config><script>// This script tests whether all identifiers from the Service Metadata are mentioned in a Dataset metadata record
// and the other way around: all identifers from the Dataset metadata are mentioned in the Service Metadata
// check that:
// from list 1, all identifiers are present in list 2
// from list 2, all identifiers are present in list 1
def serviceMdDatasetIds = testRunner.testCase.testSuite.project.getPropertyValue("MdIdentifiersList").split(',');
def datasetMdDatasetIds = testRunner.testCase.testSuite.project.getPropertyValue("mdIdentifiersDatasetMetadata").split(',');

// check 1: from service metadata, all dataset identifiers are mentioned in the dataset metadata (at least) once
for (sid in serviceMdDatasetIds) {
	def datasetIdFromServiceMetadataPresent = false;
	for (mid in datasetMdDatasetIds) {
		if (mid==sid) {
			datasetIdFromServiceMetadataPresent = true;
		}
	}
	if (datasetIdFromServiceMetadataPresent) {
		log.info("The id mentioned in Service Metadata " + sid + " is present in the identifiers from the Dataset Metadata (" + testRunner.testCase.testSuite.project.getPropertyValue("mdIdentifiersDatasetMetadata") + ") ")
	} else {
		log.error("The id mentioned in Service Metadata " + sid + " is NOT present in the identifiers from the Dataset Metadata (" + testRunner.testCase.testSuite.project.getPropertyValue("mdIdentifiersDatasetMetadata") + ") ")
	}
	assert datasetIdFromServiceMetadataPresent;
}

// now the other way around
// check 2: from dataset metadata, all dataset identifiers are mentioned in the service metadata (at least) once

for (mid in datasetMdDatasetIds) {
	if (mid.length() > 0) {
		def datasetIdFromDatasetMetadataPresent = false;
		for (sid in serviceMdDatasetIds) {
			if (mid==sid) {
				datasetIdFromDatasetMetadataPresent = true;
			}
		}
		if (datasetIdFromDatasetMetadataPresent) {
			log.info("The id mentioned in Dataset Metadata " + mid + " is present in the identifiers from the Service Metadata (" + testRunner.testCase.testSuite.project.getPropertyValue("MdIdentifiersList") + ")")
		} else {
			log.error("The id mentioned in Dataset Metadata " + mid + " is NOT present in the identifiers from the Service Metadata (" + testRunner.testCase.testSuite.project.getPropertyValue("MdIdentifiersList") + ")")
		}
		assert datasetIdFromDatasetMetadataPresent;
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../logs/traces/</con:value></con:property><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetMetadata</con:value></con:property><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:28:58.352+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:28:58.352+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value/></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>etf.AssociatedRequirements</con:name><con:value>M-03</con:value></con:property></con:properties></con:testSuite><con:testSuite name="M-04 Dataset Feed" id="07c1c315-c45c-4dd5-8be3-6dd12604b337"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feed Elements Mandatory" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="01859f31-5d26-452b-a2cc-6d99b91117a1"><con:settings/><con:testStep type="properties" name="Properties" id="618c326c-1e73-4fb4-a71a-d5ce4ae7d62c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>feedXml</con:name><con:value><![CDATA[<html lang="de" itemtype="http://schema.org/WebPage" itemscope="">
   <head>
      <meta content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" name="generator"/>
      <meta itemprop="image" content="/images/google_favicon_128.png"/>
      <title>Google</title>
      <script type="text/javascript"><![CDATA[(function(){window.google={kEI:'P9JkVdm8GoH_sgHf2oGgBg',kEXPI:'3700279,3700366,4026111,4026240,4029569,4029815,4032031,4032500,4032521,4032632,4032643,4032645,4032677,4032925,4033183,4033191,4033307,4034332,4034425,4034884,4035816,4035980,4036486,4036531,4036540,4036664,4036895,4037457,4037513,4037538,4037651,8300096,8500394,8500948,8501247,8501280,8501295,8501351,8501406,8501489,8501498,10200083,10201103,10201180,10201192',authuser:0,kSID:'c9c918f0_10'};google.kHL='de';})();(function(){google.lc=[];google.li=0;google.getEI=function(a){for(var b;a&&(!a.getAttribute||!(b=a.getAttribute("eid")));)a=a.parentNode;return b||google.kEI};google.getLEI=function(a){for(var b=null;a&&(!a.getAttribute||!(b=a.getAttribute("leid")));)a=a.parentNode;return b};google.https=function(){return"https:"==window.location.protocol};google.ml=function(){};google.time=function(){return(new Date).getTime()};google.log=function(a,b,e,f,l){var d=new Image,h=google.lc,g=google.li,c="",m=google.ls||"";d.onerror=d.onload=d.onabort=function(){delete h[g]};h[g]=d;if(!e&&-1==b.search("&ei=")){var k=google.getEI(f),c="&ei="+k;-1==b.search("&lei=")&&((f=google.getLEI(f))?c+="&lei="+f:k!=google.kEI&&(c+="&lei="+google.kEI))}a=e||"/"+(l||"gen_204")+"?atyp=i&ct="+a+"&cad="+b+c+m+"&zx="+google.time();/^http:/i.test(a)&&google.https()?(google.ml(Error("a"),!1,{src:a,glmm:1}),delete h[g]):(window.google&&window.google.vel&&
window.google.vel.lu&&window.google.vel.lu(a),d.src=a,google.li=g+1)};google.y={};google.x=function(a,b){google.y[a.id]=[a,b];return!1};google.load=function(a,b,e){google.x({id:a+n++},function(){google.load(a,b,e)})};var n=0;})();google.kCSI={};var _gjwl=location;function _gjuc(){var a=_gjwl.href.indexOf("#");if(0<=a&&(a=_gjwl.href.substring(a),0<a.indexOf("&q=")||0<=a.indexOf("#q="))&&(a=a.substring(1),-1==a.indexOf("#"))){for(vard=0;d<a.length;){varb=d;"&"==a.charAt(b)&&++b;varc=a.indexOf("&",b);-1==c&&(c=a.length);b=a.substring(b,c);if(0==b.indexOf("fp="))a=a.substring(0,d)+a.substring(c,a.length),c=d;elseif("cad=h"==b)return0;d=c}_gjwl.href="/search?"+a+"&cad=h";return1}return0}function_gjh(){!_gjuc()&&window.google&&google.x&&google.x({id:"GJH"},function(){google.nav&&google.nav.gjh&&google.nav.gjh()})};window._gjh&&_gjh();]]]]>><![CDATA[</script>
      <style type="text/css">#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}</style>
      <style type="text/css">body,td,a,p,.h{font-family:arial,sans-serif}body{margin:0;overflow-y:scroll}#gog{padding:3px 8px 0}td{line-height:.8em}.gac_m td{line-height:17px}form{margin-bottom:20px}.h{color:#36c}.q{color:#00c}.ts td{padding:0}.ts{border-collapse:collapse}em{font-weight:bold;font-style:normal}.lst{height:25px;width:496px}.gsfi,.lst{font:18px arial,sans-serif}.gsfs{font:17px arial,sans-serif}.ds{display:inline-box;display:inline-block;margin:3px 0 4px;margin-left:4px}input{font-family:inherit}a.gb1,a.gb2,a.gb3,a.gb4{color:#11c !important}body{background:#fff;color:black}a{color:#11c;text-decoration:none}a:hover,a:active{text-decoration:underline}.fl a{color:#36c}a:visited{color:#551a8b}a.gb1,a.gb4{text-decoration:underline}a.gb3:hover{text-decoration:none}#ghead a.gb2:hover{color:#fff !important}.sblc{padding-top:5px}.sblc a{display:block;margin:2px 0;margin-left:13px;font-size:11px}.lsbb{background:#eee;border:solid 1px;border-color:#ccc #999 #999 #ccc;height:30px}.lsbb{display:block}.ftl,#fll a{display:inline-block;margin:0 12px}.lsb{background:url(/images/srpr/nav_logo80.png) 0 -258px repeat-x;border:none;color:#000;cursor:pointer;height:30px;margin:0;outline:0;font:15px arial,sans-serif;vertical-align:top}.lsb:active{background:#ccc}.lst:focus{outline:none}</style>
      <script type="text/javascript"/>
      <style type="text/css">.pmoabs{background-color:#fff;border:1px solid #E5E5E5;color:#666;font-size:13px;padding-bottom:20px;position:absolute;right:2px;top:3px;z-index:986}#pmolnk{border-radius:2px;-moz-border-radius:2px;-webkit-border-radius:2px}.kd-button-submit{border:1px solid #3079ed;background-color:#4d90fe;background-image:-webkit-gradient(linear,left top,left bottom,from(#4d90fe),to(#4787ed));background-image:-webkit-linear-gradient(top,#4d90fe,#4787ed);background-image:-moz-linear-gradient(top,#4d90fe,#4787ed);background-image:-ms-linear-gradient(top,#4d90fe,#4787ed);background-image:-o-linear-gradient(top,#4d90fe,#4787ed);background-image:linear-gradient(top,#4d90fe,#4787ed);filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#4d90fe',EndColorStr='#4787ed')}.kd-button-submit:hover{border:1px solid #2f5bb7;background-color:#357ae8;background-image:-webkit-gradient(linear,left top,left bottom,from(#4d90fe),to(#357ae8));background-image:-webkit-linear-gradient(top,#4d90fe,#357ae8);background-image:-moz-linear-gradient(top,#4d90fe,#357ae8);background-image:-ms-linear-gradient(top,#4d90fe,#357ae8);background-image:-o-linear-gradient(top,#4d90fe,#357ae8);background-image:linear-gradient(top,#4d90fe,#357ae8);filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#4d90fe',EndColorStr='#357ae8')}.kd-button-submit:active{-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.3);box-shadow:inset 0 1px 2px rgba(0,0,0,0.3)}#pmolnk a{color:#fff;display:inline-block;font-weight:bold;padding:5px 20px;text-decoration:none;white-space:nowrap}.xbtn{color:#999;cursor:pointer;font-size:23px;line-height:5px;padding-top:5px}.padi{padding:0 8px 0 10px}.padt{padding:5px 20px 0 0;color:#444}.pads{text-align:left;max-width:200px}</style>
   </head>
   <body bgcolor="#fff">
      <script type="text/javascript"><![CDATA[(function(){var src='/images/nav_logo199.png';var iesg=false;document.body.onload = function(){window.n && window.n();if (document.images){new Image().src=src;}
if (!iesg){document.f&&document.f.q.focus();document.gbqf&&document.gbqf.q.focus();}
}
})();]]]]>><![CDATA[</script>
      <div id="mngb">
         <div id="gbar">
            <nobr>
               <b class="gb1">Suche</b>
               <a href="http://www.google.de/imghp?hl=de&amp;tab=wi" class="gb1">Bilder</a>
               <a href="http://maps.google.de/maps?hl=de&amp;tab=wl" class="gb1">Maps</a>
               <a href="https://play.google.com/?hl=de&amp;tab=w8" class="gb1">Play</a>
               <a href="http://www.youtube.com/?gl=DE&amp;tab=w1" class="gb1">YouTube</a>
               <a href="http://news.google.de/nwshp?hl=de&amp;tab=wn" class="gb1">News</a>
               <a href="https://mail.google.com/mail/?tab=wm" class="gb1">Gmail</a>
               <a href="https://drive.google.com/?tab=wo" class="gb1">Drive</a>
               <a href="http://www.google.de/intl/de/options/" style="text-decoration:none" class="gb1">
                  <u>Mehr</u>
                  »
               </a>
            </nobr>
         </div>
         <div width="100%" id="guser">
            <nobr>
               <span class="gbi" id="gbn"/>
               <span class="gbf" id="gbf"/>
               <span id="gbe"/>
               <a class="gb4" href="http://www.google.de/history/optout?hl=de">Webprotokoll</a>
               |
               <a class="gb4" href="/preferences?hl=de">Einstellungen</a>
               |
               <a class="gb4" href="https://accounts.google.com/ServiceLogin?hl=de&amp;continue=http://www.google.de/" id="gb_70" target="_top">Anmelden</a>
            </nobr>
         </div>
      </div>
      <center>
         <span style="display:block" id="prt"/>
         <div>
            <div style="behavior:url(#default#userdata);display:none" id="pmocntr2" class="pmoabs">
               <table border="0">
                  <tr>
                     <td colspan="2">
                        <div style="float:right" onclick="google.promos&amp;&amp;google.promos.toast&amp;&amp; google.promos.toast.cpc()" class="xbtn">×</div>
                     </td>
                  </tr>
                  <tr>
                     <td rowspan="2" class="padi">
                        <img src="/images/icons/product/chrome-48.png"/>
                     </td>
                     <td class="pads">Schneller im Internet unterwegs</td>
                  </tr>
                  <tr>
                     <td class="padt">
                        <div id="pmolnk" class="kd-button-submit">
                           <a onclick="google.promos&amp;&amp;google.promos.toast&amp;&amp; google.promos.toast.cl()" href="/chrome/index.html?hl=de&amp;brand=CHNG&amp;utm_source=de-hpp&amp;utm_medium=hpp&amp;utm_campaign=de">Installieren Sie Google Chrome</a>
                        </div>
                     </td>
                  </tr>
               </table>
            </div>
            <script type="text/javascript"><![CDATA[(function(){var a={s:{}};a.s.va=50;a.s.ra=10;a.s.aa="body";a.s.Ra=!0;a.s.Ua=function(b,c){var d=a.s.Ha();a.s.Ja(d,b,c);a.s.Va(d);a.s.Ra&&a.s.Sa(d)};a.s.Va=function(b){(b=a.s.ca(b))&&0<b.forms.length&&b.forms[0].submit()};a.s.Ha=function(){varb=document.createElement("iframe");b.height=0;b.width=0;b.style.overflow="hidden";b.style.top=b.style.left="-100px";b.style.position="absolute";document.body.appendChild(b);returnb};a.s.ca=function(b){returnb.contentDocument||b.contentWindow.document};a.s.Ja=function(b,c,d){b=a.s.ca(b);b.open();d=["<",a.s.aa,'><form method=POST action="',d,'">'];for(vareinc)c.hasOwnProperty(e)&&d.push('<textarea name="',e,'">',c[e],"</textarea>");d.push("</form></",a.s.aa,">");b.write(d.join(""));b.close()};a.s.ea=function(b,c){c>a.s.ra?google&&google.ml&&google.ml(Error("ogcdr"),!1,{cause:"timeout"}):b.contentWindow?a.s.Ta(b):window.setTimeout(function(){a.s.ea(b,c+1)},a.s.va)};a.s.Ta=function(b){document.body.removeChild(b)};a.s.Sa=function(b){a.s.Fa(b,"load",function(){a.s.ea(b,0)})};a.s.Fa=function(b,c,d){b.addEventListener?b.addEventListener(c,d,!1):b.attachEvent&&b.attachEvent("on"+c,d)};varm={Ya:0,G:1,H:2,M:5};a.o={};a.o.O={na:"i",L:"d",pa:"l"};a.o.C={P:"0",I:"1"};a.o.R={N:1,L:2,K:3};a.o.A={ha:"a",la:"g",F:"c",Ba:"u",Aa:"t",P:"p",ta:"pid",ja:"eid",Ca:"at"};a.o.oa=window.location.protocol+"//www.google.com/_/og/promos/";a.o.ka="g";a.o.Da="z";a.o.V=function(b,c,d,e){varf=null;switch(c){casem.G:f=window.gbar.up.gpd(b,d,!0);break;casem.M:f=window.gbar.up.gcc(e)}returnnull==f?0:parseInt(f,10)};a.o.Na=function(b,c,d){returnc==m.G?null!=window.gbar.up.gpd(b,d,!0):!1};a.o.S=function(b,c,d,e,f,h,k,l){varg={};g[a.o.A.P]=b;g[a.o.A.la]=c;g[a.o.A.ha]=d;g[a.o.A.Ca]=e;g[a.o.A.ja]=f;g[a.o.A.ta]=1;k&&(g[a.o.A.F]=k);l&&(g[a.o.A.Ba]=l);if(h)g[a.o.A.Aa]=h;elsereturngoogle.ml(Error("knu"),!1,{cause:"Token is not found"}),null;returng};a.o.Y=function(b,c,d){if(b){vare=c?a.o.ka:a.o.Da;c&&d&&(e+="?authuser="+d);a.s.Ua(b,a.o.oa+e)}};a.o.Ia=function(b,c,d,e,f,h,k){b=a.o.S(c,b,a.o.O.L,a.o.R.L,d,f,null,e);a.o.Y(b,h,k)};a.o.La=function(b,c,d,e,f,h,k){b=a.o.S(c,b,a.o.O.na,a.o.R.N,d,f,e,null);a.o.Y(b,h,k)};a.o.Qa=function(b,c,d,e,f,h,k,l,g,n){switch(c){casem.M:window.gbar.up.dpc(e,f);break;casem.G:window.gbar.up.spd(b,d,1,!0);break;casem.H:g=g||!1,l=l||"",h=h||0,k=k||a.o.C.I,n=n||0,a.o.Ia(e,h,k,f,l,g,n)}};a.o.Oa=function(b,c,d,e,f){returnc==m.G?0]]]]>><![CDATA[</script><![CDATA[
            =d:!1};a.o.Ka=function(b,c,d,e,f,h,k,l,g,n){switch(c){case m.M:window.gbar.up.iic(e,f);break;case m.G:c=a.o.V(b,c,d,e)+1;window.gbar.up.spd(b,d,c.toString(),!0);break;case m.H:g=g||!1,l=l||"",h=h||0,k=k||a.o.C.P,n=n||0,a.o.La(e,h,k,1,l,g,n)}};a.o.Pa=function(b,c,d,e,f,h){b=a.o.S(c,b,a.o.O.pa,a.o.R.K,d,e,null,null);a.o.Y(b,f,h)};var p={Wa:"a",Za:"l",Xa:"c",ia:"d",K:"h",N:"i",jb:"n",I:"x",gb:"ma",hb:"mc",ib:"mi",$a:"pa",ab:"pc",cb:"pi",fb:"pn",eb:"px",bb:"pd",kb:"gpa",mb:"gpi",nb:"gpn",ob:"gpx",lb:"gpd"};a.i={};a.i.w={qa:"hplogo",za:"pmocntr2"};a.i.C={ya:"0",I:"1",ga:"2"};a.i.v=document.getElementById(a.i.w.za);a.i.ma=16;a.i.wa=2;a.i.xa=20;google.promos=google.promos||{};google.promos.toast=google.promos.toast||{};a.i.J=function(b){a.i.v&&(a.i.v.style.display=b?"":"none",a.i.v.parentNode&&(a.i.v.parentNode.style.position=b?"relative":""))};a.i.fa=function(b){try{if(a.i.v&&b&&b.es&&b.es.m){var c=window.gbar.rtl(document.body)?"left":"right";a.i.v.style[c]=b.es.m-a.i.ma+a.i.wa+"px";a.i.v.style.top=a.i.xa+"px"}}catch(d){google.ml(d,!1,{cause:a.i.B+"_PT"})}};google.promos.toast.cl=function(){try{a.i.T==m.H&&a.o.Pa(a.i.W,a.i.D,a.i.C.ga,a.i.$,a.i.X,a.i.Z),window.gbar.up.sl(a.i.D,a.i.B,p.K,a.i.U(),1)}catch(b){google.ml(b,!1,{cause:a.i.B+"_CL"})}};google.promos.toast.cpc=function(){try{a.i.v&&(a.i.J(!1),a.o.Qa(a.i.v,a.i.T,a.i.w.ba,a.i.W,a.i.Ga,a.i.D,a.i.C.I,a.i.$,a.i.X,a.i.Z),window.gbar.up.sl(a.i.D,a.i.B,p.ia,a.i.U(),1))}catch(b){google.ml(b,!1,{cause:a.i.B+"_CPC"})}};a.i.da=function(){try{if(a.i.v){var b=276,c=document.getElementById(a.i.w.qa);c&&(b=Math.max(b,c.offsetWidth));var d=parseInt(a.i.v.style.right,10)||0;a.i.v.style.visibility=2*(a.i.v.offsetWidth+d)+b>document.body.clientWidth?"hidden":""}}catch(e){google.ml(e,!1,{cause:a.i.B+"_HOSW"})}};a.i.Ea=function(){var b=["gpd","spd","aeh","sl"];if(!window.gbar||!window.gbar.up)return!1;for(var c=0,d;d=b[c];c++)if(!(d in window.gbar.up))return!1;return!0};a.i.Ma=function(){return a.i.v.currentStyle&&"absolute"!=a.i.v.currentStyle.position};google.promos.toast.init=function(b,c,d,e,f,h,k,l,g,n,q,r){try{a.i.Ea()?a.i.v&&(e==m.H&&!l==!g?(google.ml(Error("tku"),!1,{cause:"zwieback: "+g+", gaia: "+l}),a.i.J(!1)):(a.i.w.F="toast_count_"+c+(q?"_"+q:""),a.i.w.ba="toast_dp_"+c+(r?"_"+r:""),a.i.B=d,a.i.D=b,a.i.T=e,a.i.W=c,a.i.Ga=f,a.i.$=l?l:g,a.i.X=!!l,a.i.Z=k,a.o.Na(a.i.v,e,a.i.w.ba,c)||a.o.Oa(a.i.v,e,h,a.i.w.F,c)||a.i.Ma()?a.i.J(!1):(a.o.Ka(a.i.v,e,a.i.w.F,c,f,a.i.D,a.i.C.ya,a.i.$,a.i.X,a.i.Z),n||(window.gbar.up.aeh(window,"resize",a.i.da),window.lol=a.i.da,window.gbar.elr&&a.i.fa(window.gbar.elr()),window.gbar.elc&&window.gbar.elc(a.i.fa),a.i.J(!0)),window.gbar.up.sl(a.i.D,a.i.B,p.N,a.i.U())))):google.ml(Error("apa"),!1,{cause:a.i.B+"_INIT"})}catch(t){google.ml(t,!1,{cause:a.i.B+"_INIT"})}};a.i.U=function(){var b=a.o.V(a.i.v,a.i.T,a.i.w.F,a.i.W);return"ic="+b};})();
            ]]]]>><![CDATA[<script type="text/javascript"><![CDATA[(function(){var sourceWebappPromoID=141005;var sourceWebappGroupID=5;var payloadType=5;var cookieMaxAgeSec=2592000;var dismissalType=5;var impressionCap=25;var gaiaXsrfToken='';var zwbkXsrfToken='';var kansasDismissalEnabled=false;var sessionIndex=0;var invisible=false;window.gbar&&gbar.up&&gbar.up.r&&gbar.up.r(payloadType,function(show){if (show){google.promos.toast.init(sourceWebappPromoID,sourceWebappGroupID,payloadType,dismissalType,cookieMaxAgeSec,impressionCap,sessionIndex,gaiaXsrfToken,zwbkXsrfToken,invisible,'0612');}
});})();]]]]>><![CDATA[</script>
         </div>
         <br id="lgpd" clear="all"/>
         <div id="lga">
            <div style="padding:28px 0 3px">
               <div onload="window.lol&amp;&amp;lol()" id="hplogo" align="left" title="Google" style="height:110px;width:276px;background:url(/images/srpr/logo9w.png) no-repeat">
                  <div style="color:#777;font-size:16px;font-weight:bold;position:relative;top:70px;left:218px" nowrap="">Deutschland</div>
               </div>
            </div>
            <br/>
         </div>
         <form name="f" action="/search">
            <table cellspacing="0" cellpadding="0">
               <tr valign="top">
                  <td width="25%"> </td>
                  <td nowrap="" align="center">
                     <input type="hidden" value="ISO-8859-1" name="ie"/>
                     <input type="hidden" name="hl" value="de"/>
                     <input value="hp" type="hidden" name="source"/>
                     <div style="height:32px;margin:4px 0" class="ds">
                        <input size="57" name="q" maxlength="2048" title="Google-Suche" value="" class="lst" autocomplete="off" style="color:#000;margin:0;padding:5px 8px 0 6px;vertical-align:top"/>
                     </div>
                     <br style="line-height:0"/>
                     <span class="ds">
                        <span class="lsbb">
                           <input type="submit" name="btnG" value="Google-Suche" class="lsb"/>
                        </span>
                     </span>
                     <span class="ds">
                        <span class="lsbb">
                           <input type="submit" onclick="if(this.form.q.value)this.checked=1; else top.location='/doodles/'" name="btnI" value="Auf gut GlÃ¼ck!" class="lsb"/>
                        </span>
                     </span>
                  </td>
                  <td width="25%" nowrap="" align="left" class="fl sblc">
                     <a href="/advanced_search?hl=de&amp;authuser=0">Erweiterte Suche</a>
                     <a href="/language_tools?hl=de&amp;authuser=0">Sprachoptionen</a>
                  </td>
               </tr>
            </table>
            <input value="1" type="hidden" name="gbv" id="gbv"/>
         </form>
         <div id="gac_scont"/>
         <div style="font-size:83%;min-height:3.5em">
            <br/>
         </div>
         <span id="footer"/>
         <div style="font-size:10pt">
            <div id="fll" style="margin:19px auto;text-align:center">
               <a href="/intl/de/ads/">Werben mit Google</a>
               <a href="/services/">Unternehmensangebote</a>
               <a rel="publisher" href="https://plus.google.com/117570067846637741468">+Google</a>
               <a href="/intl/de/about.html">Ãber Google</a>
               <a id="fehl" href="http://www.google.de/setprefdomain?prefdom=US&amp;sig=0_GiYSVF43Ne9IMF6nzZb8QcQkwIg%3D">Google.com</a>
            </div>
         </div>
         <p style="color:#767676;font-size:8pt">
            © 2015 -
            <a href="/intl/de/policies/privacy/">DatenschutzerklÃ¤rung</a>
            -
            <a href="/intl/de/policies/terms/">Nutzungsbedingungen</a>
         </p>
      </center>
      <div id="xjsd"/>
      <div data-jiis="bp" id="xjsi">
         <script type="text/javascript"><![CDATA[(function(){function c(b){window.setTimeout(function(){var a=document.createElement("script");a.src=b;document.getElementById("xjsd").appendChild(a)},0)}google.dljp=function(b,a){google.xjsu=b;c(a)};google.dlj=c;})();(function(){window.google.xjsrm=[];})();if(google.y)google.y.first=[];if(!google.xjs){window._=window._||{};window._._DumpException=function(e){throw e};if(google.timers&&google.timers.load.t){google.timers.load.t.xjsls=new Date().getTime();}google.dljp('/xjs/_/js/k\x3dxjs.hp.en_US.zSSCkcFAw8o.O/m\x3dsb_he,d/rt\x3dj/d\x3d1/t\x3dzcms/rs\x3dACT90oFi6pAykT5687G6V-xFMOyk6zAcMg','/xjs/_/js/k\x3dxjs.hp.en_US.zSSCkcFAw8o.O/m\x3dsb_he,d/rt\x3dj/d\x3d1/t\x3dzcms/rs\x3dACT90oFi6pAykT5687G6V-xFMOyk6zAcMg');google.xjs=1;}google.pmc={"sb_he":{"agen":true,"cgen":true,"client":"heirloom-hp","dh":true,"ds":"","fl":true,"host":"google.de","jam":0,"jsonp":true,"lm":true,"msgs":{"cibl":"Suche lÃ¶schen","dym":"Meinten Sie:","lcky":"Auf gut GlÃ¼ck!","lml":"Weitere Informationen","oskt":"Eingabetools","psrc":"Diese Suchanfrage wurde aus Ihrem \u003Ca href=\"/history\"\u003EWebprotokoll\u003C/a\u003E entfernt.","psrl":"Entfernen","sbit":"Bildersuche","srch":"Google-Suche"},"ovr":{},"pq":"","refoq":true,"refpd":true,"rfs":[],"scd":10,"sce":5,"stok":"ji2j652Mv-dCycPtyRXeE-Xfmfg"},"d":{}};google.y.first.push(function(){if(google.med){google.med('init');google.initHistory();google.med('history');}});if(google.j&&google.j.en&&google.j.xi){window.setTimeout(google.j.xi,0);}]]]]>><![CDATA[</script>
      </div>
   </body>
</html>]]></con:value></con:property><con:property><con:name>dataFeedURL</con:name><con:value>http://www.google.de</con:value></con:property><con:property><con:name>dataSetURL</con:name><con:value/></con:property><con:property><con:name>dataFeedURLEncoded</con:name><con:value/></con:property><con:property><con:name>mediaTypes</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="INSPIREMediaTypes_application" id="8ef21a6b-902d-4585-ae34-e5af27262ef2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="INSPIREMediaTypes_application" id="397e7281-4aa8-492b-92f9-a0b1bf94aa32" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://inspire.ec.europa.eu/media-types/application/application.nl.atom</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="INSPIRE Media Types list available" id="ff71e617-66d7-47f4-9646-1808c3b35912"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="INSPIREMediaTypes_image" id="45609e8e-e08d-4aec-8c63-17d333571424"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="INSPIREMediaTypes_image" id="397e7281-4aa8-492b-92f9-a0b1bf94aa32" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://inspire.ec.europa.eu/media-types/image/image.nl.atom</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="INSPIRE Media Types list available" id="ff71e617-66d7-47f4-9646-1808c3b35912"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="INSPIREMediaTypes_text" id="bc61d92f-382a-4dc4-9626-57a031db776b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="INSPIREMediaTypes_text" id="397e7281-4aa8-492b-92f9-a0b1bf94aa32" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://inspire.ec.europa.eu/media-types/text/text.nl.atom</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="INSPIRE Media Types list available" id="ff71e617-66d7-47f4-9646-1808c3b35912"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransferMediaTypes" id="876d8f3a-42ce-4907-b5a1-d960c6a5bf29"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>MediaTypes_application</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>INSPIREMediaTypes_application</con:sourceStep><con:sourcePath>declare namespace atom='http://www.w3.org/2005/Atom';

concat('application/',string-join(//atom:entry/atom:title,',application/'))</con:sourcePath><con:targetType>mediaTypes</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>MediaTypes_image</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>INSPIREMediaTypes_image</con:sourceStep><con:sourcePath>declare namespace atom='http://www.w3.org/2005/Atom';

concat('${#mediaTypes},image/',string-join(//atom:entry/atom:title,',image/'))</con:sourcePath><con:targetType>mediaTypes</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>MediaTypes_text</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>INSPIREMediaTypes_text</con:sourceStep><con:sourcePath>declare namespace atom='http://www.w3.org/2005/Atom';

concat('${#mediaTypes},text/',string-join(//atom:entry/atom:title,',text/'))</con:sourcePath><con:targetType>mediaTypes</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath xsi:nil="true"/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="GetServiceFeed" id="6a056425-bb10-4c60-825f-918a41486935"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetServiceFeed" id="8277673a-29af-4a35-b538-ce99818fce6f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Service Feed available" id="28fa545b-65e4-4dde-a7a0-5b2b3b249e74"><con:configuration><codes>200,301,302,303</codes></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransferFeed" id="e9094e32-3be8-4bb5-b6c5-01fa6784827e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="false" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>feedXml</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetServiceFeed</con:sourceStep><con:sourcePath/><con:targetType>feedXml</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="RunTestsForAllDatasetFeeds" id="1d725a88-4a09-4d3c-86f2-a5a530c5788e"><con:settings/><con:config><script>props = testRunner.testCase.testSteps['Properties']

// Start parsing of Service Feed
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def feedXmlHolder = groovyUtils.getXmlHolder(props.getPropertyValue("feedXml"))
feedXmlHolder.namespaces["atom"] = "http://www.w3.org/2005/Atom";
feedXmlHolder.namespaces["xlink"] = "http://www.w3.org/1999/xlink";

// Pull out the URLs of the Dataset Feeds
def dataFeedUrlNodes = feedXmlHolder.getNodeValues("//atom:entry/atom:link[@rel='alternate' and @type='application/atom+xml']/@href");

// clear url to run the Dataset Feed tests, set the url to the serviceEndpoint to be sure.
props.setPropertyValue("dataFeedURL",testRunner.testCase.testSuite.project.getPropertyValue("serviceEndpoint"))

// now run Feed test for each dataFeedUrl, to validate Dataset feeds
for( i in dataFeedUrlNodes )
{   
   i=i.replaceAll("%7B","{")
   i=i.replaceAll("%7D","}")
   log.info("The Atom feed refers to Dataset Feeds. Now checking Dataset Feed with URL: " + i)   
   props.setPropertyValue("dataFeedURL",i)
   props.setPropertyValue("dataFeedURLEncoded",i.replaceAll("&amp;","&amp;amp;"))
   testRunner.runTestStepByName("ValidateDatasetFeed")
   // testRunner.runTestStepByName("Tracer")
   testRunner.runTestStepByName("PropertyTransferDatasetFeedXml")
   testRunner.runTestStepByName("RunTestsForAllDatasetUrls") 
   testRunner.runTestStepByName("ResolveDatasetLink") 
   // testRunner.runTestStepByName("Run TestCase M-04: Dataset Metadata Mandatory")
}
</script></con:config></con:testStep><con:testStep type="httprequest" name="ValidateDatasetFeed" id="d4c09a50-2618-4207-ae0d-0d5f772b840c"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="ValidateDatasetFeed" id="0137e398-fe3d-4c7b-af8f-e1dfb0324694" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#dataFeedURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-04##AtomLinkSelf: Feed link to self exists and has proper language references" id="a0acb1e7-be24-468d-8647-fc0603312ea6"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $linkself:=/atom:feed/atom:link[@rel='self' and @type='application/atom+xml' and @hreflang=//atom:feed/atom:title/@xml:lang]/@href
return
if ($linkself='${#dataFeedURLEncoded}')
then ""
else "The Atom feed does NOT contain a link to itself including a language reference. Check the element /atom:feed/atom:link with @rel='self'."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req20: Feed title exists" id="8523ae5b-baf3-42e3-9f97-4b75c2d41df2"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $title:=/atom:feed/atom:title
return
if (string-length($title)=0)
then "The Atom feed does NOT contain a Feed Title."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req21: Feed id refers to self URL" id="fed3a553-ca1f-4d25-9d19-bf83d617f84d"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $atomid:=/atom:feed/atom:id
return
if ($atomid!='${#dataFeedURLEncoded}')
then concat("The Atom feed id ", $atomid," does NOT refer to the self URL (",'${#dataFeedURLEncoded}',").")
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req22: Feed rights element exists" id="e8aaf0c5-a1eb-4795-abdf-50eed952c424"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $rights:=/atom:feed/atom:rights
return
if (string-length($rights)=0)
then "The Atom feed does NOT contain rights information."
else ""
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req23: Feed updated element exists and contains a date and time" id="484655d1-a8b6-45ba-b895-a323cb52f05b"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $updated:=year-from-dateTime(xs:dateTime(/atom:feed/atom:updated))
return
if ($updated > 0)
then ""
else "The Atom feed does NOT contain updated information."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req24: Feed contains an author name and email address" id="6ed3a5ef-f791-4252-93b1-1237a811e900"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $author:=/atom:feed/atom:author[string-length(./atom:name)>0 and string-length(./atom:email)>0]
return
if (exists($author))
then ""
else "The Atom feed does NOT contain an author name and/or email address."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req25-28-31: Feed contains at least one entry for data, with a link to the dataset and length set or a section link in case of multiple files." id="f506f6b8-3b2c-472f-aa14-cdb03782748f"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $nrdatalinks:=count(//atom:entry/atom:link[(@rel='alternate' and @type!='application/atom+xml' and number(@length) > 0) or (@rel='section')])
return
if ($nrdatalinks > 0)
then ""
else "The Atom feed does NOT contain any entries with a correct link for data. Check if the entries contain alternate links (not referring to another Atom feed) or section links for multiple files."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req26a: Dataset feeds contain seperate entries for each format/CRS combination. Each entry link for download has one / the same (media)type" id="3c9cdf67-38ba-4a51-85b0-a470a4ca411e"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[./atom:link[@rel='alternate' and @type!=../atom:link[1][@rel='alternate']/@type]]
return 
concat ("The entry with id: ",$entry/atom:id," does not contain separate entries for each media type/CRS combination. This entry's link for download has different (media) types.")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req26b: Dataset feeds contain seperate entries for each format/CRS combination. Each entry has the same CRS category elements" id="3edea1b7-a51a-477a-a819-7a1b163feab6"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[./atom:category[@term!=../atom:category[1]/@term]]
return 
concat ("The entry with id: ",$entry/atom:id," does not contain separate entries for each media type/CRS combination. This entry's category terms are not the same, indicating that multiple CRSes are offered in the same entry.")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req27: Feed contains at least one link to Spatial Object descriptions (in text/html)" id="299103d0-5167-4cf4-b64c-a251f7b0f894"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $sodesc:=/atom:feed/atom:link[@rel='describedby' and @type='text/html']
return
if (exists($sodesc))
then ""
else " there is no link to a Spatial Object description. That is: a link with type='text/html' and rel='describedby'."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req31: If a section link is provided (for multiple files) then there should be more than 1 section link" id="fa8fff6a-c9e8-4b7e-8997-6d29163359a3"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[count(./atom:link[@rel='section'])=1]
return
concat ("If a section link is provided (for multiple files) then there should be more than 1 section link. The entry with id ", $entry/atom:id ,  " has only 1 section link.")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req32: If multiple files are provided, then the links shall be of rel='section' and there shall be a content element or alternate link as a description" id="36243a7d-204a-4d0b-b1ce-da634f14d302"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[./atom:link[@rel='section'] and count(./atom:link[@rel='alternate'])=0 and count(./atom:content) = 0]
return
concat ("If multiple files are provided, then the links shall be of rel='section' and there shall be a content element or alternate link as a description. The entry with id ", $entry/atom:id ,  " does not have this.")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req34: Only media types listed in the INSPIRE media-types register at http://inspire.ec.europa.eu/media-types/ shall be used." id="4b9ecdf9-3b55-45f6-9343-d08cb5d04b56"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry
where contains('${#mediaTypes}', $entry/atom:link[@rel='alternate']/@type)!=true
return
concat("The alternate link ",$entry/atom:link[@rel='alternate']/@href," for entry with id ",$entry/atom:id," offers a media type '",$entry/atom:link[@rel='alternate']/@type,"' that is not in the INSPIRE list at http://inspire.ec.europa.eu/media-types/. ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-04##req35: Each entry shall have an element category for the CRS" id="86273ea9-66e7-41d8-a171-3a8db6cbbcfc"><con:configuration><path>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace georss='http://www.georss.org/georss';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
for $entry in //atom:entry[count(./atom:category[string-length(@term)>0 and string-length(@label)>0])!=1]
return
concat ("Each entry shall have one element category for the CRS. The entry with id ", $entry/atom:id ,  " does not have 1 element, but :" , count(./atom:category[string-length(@term)>0 and string-length(@label)>0]), ". ")
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransferDatasetFeedXml" id="35970b91-614b-4bda-90a2-ab30e9a1e739"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>dataFeedXml</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>ValidateDatasetFeed</con:sourceStep><con:sourcePath/><con:targetType>dataFeedXml</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="RunTestsForAllDatasetUrls" id="5ea3f9f5-ea00-4ce2-b94f-60274c759d85"><con:settings/><con:config><script>props = testRunner.testCase.testSteps['Properties']

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def feedXmlHolder = groovyUtils.getXmlHolder(testRunner.testCase.testSuite.project.getPropertyValue("dataFeedXml"))
feedXmlHolder.namespaces["atom"] = "http://www.w3.org/2005/Atom";
feedXmlHolder.namespaces["xlink"] = "http://www.w3.org/1999/xlink";

// Pull out the dataSetUrlNodes
def dataSetUrlNodes = feedXmlHolder.getNodeValues("//atom:entry/atom:link[(@rel='alternate' or @rel='section') and @type!='application/atom+xml']/@href");

// Then run Feed test for each dataSetUrl
for( i in dataSetUrlNodes )
{   
   i=i.replaceAll("%7B","{")
   i=i.replaceAll("%7D","}")
   log.info("The Atom feed refers to a dataset to download at the URL: " + i)   
   props.setPropertyValue("dataSetURL",i)
   testRunner.runTestStepByName("ResolveDatasetLink")
   // testRunner.runTestStepByName("Tracer")    
}</script></con:config></con:testStep><con:testStep type="httprequest" name="ResolveDatasetLink" id="59a32c2c-e930-4fa5-ac61-f2f94d55bdb8"><con:settings/><con:config method="HEAD" xsi:type="con:HttpRequest" name="ResolveDatasetLink" id="5c46c345-abbe-4986-b32d-59dfa7e2bcff" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#dataSetURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" name="Response starts within 30 seconds (using HTTP HEAD)" id="2fc05bbf-6724-444b-bfc6-c16f9e5306a4"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../logs/traces/</con:value></con:property><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>ValidateDatasetFeed</con:value></con:property><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:28:59.403+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:28:59.404+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value/></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>etf.AssociatedRequirements</con:name><con:value>M-04</con:value></con:property></con:properties></con:testSuite><con:testSuite name="M-05 OpenSearch Description" id="052c4969-3beb-4d0c-9233-0a6507224734"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OpenSearch Mandatory" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="155ba2b3-d78c-4547-b3ae-bc64ba7e330d"><con:settings/><con:testStep type="properties" name="Properties" id="005c256d-3874-4590-b962-a215634d34ea"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>openSearchDescription</con:name><con:value/></con:property><con:property><con:name>describeSpatialDatasetUrl</con:name><con:value/></con:property><con:property><con:name>describeDataSetUrl</con:name><con:value/></con:property><con:property><con:name>getSpatialDatasetUrl</con:name><con:value/></con:property><con:property><con:name>dataSetUrl</con:name><con:value/></con:property><con:property><con:name>firstLanguage</con:name><con:value/></con:property><con:property><con:name>availableCrs</con:name><con:value/></con:property><con:property><con:name>mediaType</con:name><con:value/></con:property><con:property><con:name>describeDataSetUrlEncoded</con:name><con:value/></con:property><con:property><con:name>dataSetUrlEncoded</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="GetOpenSearchDescription" id="15705f04-6203-4cd5-beaf-409bad6cdfc5"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetOpenSearchDescription" id="387ab5b6-163f-4173-be4b-0a56476aa6b1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#openSearchDescriptionUrl}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-05##req39: OpenSearchDescription contains URL reference to itself(XQuery)" id="5e22a372-c05b-44ea-b252-d6dab157329b"><con:configuration><path>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $osurl:=/os:OpenSearchDescription/os:Url[@rel='self' and @type='application/opensearchdescription+xml' and replace(@template,":80","")=replace('${#Project#openSearchDescriptionUrl}',":80","")]
return
if (exists($osurl))
then ""
else "The OpenSearchDescription does NOT a URL reference to itself. Make sure that the element /OpenSearchDescription/Url with @rel='self' and @type='application/opensearchdescription+xml' exists and refers to the URL of the OpenSearchDescription itself (in this case: '${#Project#openSearchDescriptionUrl}')"
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-05##req40: OpenSearchDescription contains a template URL for generic search queries" id="af4bd0fc-27dc-4412-811c-c961501c77b6"><con:configuration><path>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:{
let $templateurl:=/os:OpenSearchDescription/os:Url[@rel='results' and (@type='application/atom+xml' or @type='text/html') and starts-with(@template,'http')]
return
if (exists($templateurl))
then ""
else "The OpenSearchDescription does NOT contain a template URL for generic search queries. Make sure that the element /OpenSearchDescription/Url with @rel='results' and @type='application/atom+xml' or @type='text/html' exists and is a URL."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-05##req41: OpenSearchDescription contains a &quot;Url&quot; element that describes a template URL for the Describe Spatial Data Set operation" id="8e6b49e5-1d33-43ba-8eba-9dac9577380d"><con:configuration><path>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $templateurl:=/os:OpenSearchDescription/os:Url[@rel='describedby' and @type='application/atom+xml' and starts-with(@template,'http') and contains(@template,'spatial_dataset_identifier_code') and contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]
return
if (exists($templateurl))
then ""
else "The OpenSearchDescription does NOT contain a template URL for the Describe Spatial Data Set operation. Make sure that the element /OpenSearchDescription/Url with @rel='describedby' and @type='application/atom+xml' exists and that the URL contains the INSPIRE parameters for spatial_dataset_identifier_code, spatial_dataset_identifier_namespace and language"
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-05##req42: OpenSearchDescription contains a &quot;Url&quot; element that describes a template URL for the Get Spatial Data Set operation" id="70f0ebb6-f73c-4b60-b59f-56bb068f17b1"><con:configuration><path>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures:
{
let $templateurl:=/os:OpenSearchDescription/os:Url[@rel='results' and starts-with(@template,'http') and contains(@template,'crs') and contains(@template,'spatial_dataset_identifier_code') and contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]
return
if (exists($templateurl))
then ""
else " The OpenSearchDescription does NOT contain a Url element that describes a template URL for the Get Spatial Data Set operation. Make sure that the element /OpenSearchDescription/Url with @rel='results'exists and that the URL contains the INSPIRE parameters for crs,spatial_dataset_identifier_code, spatial_dataset_identifier_namespace and language."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-05##req43: the OpenSearchDescription contains 'Query' examples with 'spatial_dataset_identifier_code' and 'spatial_dataset_identifier_namespace' attributes" id="a512c292-93ba-428c-86f5-20ec564a6d03"><con:configuration><path>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
let $nrqueries:=count(/os:OpenSearchDescription/os:Query[@role='example' and string-length(@inspire_dls:spatial_dataset_identifier_code) > 0 and string-length(@inspire_dls:spatial_dataset_identifier_namespace) > 0 ]) 
return
if ($nrqueries > 0)
then ""
else "The OpenSearchDescription does NOT contain 'Query' examples with 'spatial_dataset_identifier_code' and 'spatial_dataset_identifier_namespace' attributes. Make sure that for each dataset identifier Query examples are available."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="2900061c-5c18-42fa-8924-eb89307cd058"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>openSearchDescription</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetOpenSearchDescription</con:sourceStep><con:sourcePath/><con:targetType>openSearchDescription</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>describeSpatialDatasetUrl</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetOpenSearchDescription</con:sourceStep><con:sourcePath>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';

/os:OpenSearchDescription/os:Url[@rel='describedby' and @type='application/atom+xml' and starts-with(@template,'http') and contains(@template,'spatial_dataset_identifier_code') and contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')]/@template[1]</con:sourcePath><con:targetType>describeSpatialDatasetUrl</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>getSpatialDatasetUrl</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetOpenSearchDescription</con:sourceStep><con:sourcePath>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';

/os:OpenSearchDescription/os:Url[@rel='results' and starts-with(@template,'http') and contains(@template,'crs') and contains(@template,'spatial_dataset_identifier_code') and contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')][1]/@template</con:sourcePath><con:targetType>getSpatialDatasetUrl</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>getFirstLanguage</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetOpenSearchDescription</con:sourceStep><con:sourcePath>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';

/os:OpenSearchDescription/os:Language[1]</con:sourcePath><con:targetType>firstLanguage</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>getSpatialDatasetMediaType</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetOpenSearchDescription</con:sourceStep><con:sourcePath>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';

/os:OpenSearchDescription/os:Url[@rel='results' and starts-with(@template,'http') and contains(@template,'crs') and contains(@template,'spatial_dataset_identifier_code') and contains(@template,'spatial_dataset_identifier_namespace') and contains(@template,'language')][1]/@type</con:sourcePath><con:targetType>mediaType</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="RunTestsForAllQueryExamples" id="10ad9063-c79e-401c-a957-75e1ac0cbec8"><con:settings/><con:config><script>props = testRunner.testCase.testSteps['Properties']

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def osdXmlHolder = groovyUtils.getXmlHolder(props.getPropertyValue("openSearchDescription"))
osdXmlHolder.namespaces["os"] = "http://a9.com/-/spec/opensearch/1.1/";
osdXmlHolder.namespaces["xlink"] = "http://www.w3.org/1999/xlink";
osdXmlHolder.namespaces["inspire_dls"] = "http://inspire.ec.europa.eu/schemas/inspire_dls/1.0";

// Pull out the query examples
//def queryExamples = osdXmlHolder.getNodeValues("/os:OpenSearchDescription/os:Query[@role='example' and string-length(@inspire_dls:spatial_dataset_identifier_code) > 0 and string-length(@inspire_dls:spatial_dataset_identifier_namespace) > 0]");
def queryExamples = osdXmlHolder.getDomNodes("/os:OpenSearchDescription/os:Query[@role='example' and string-length(@inspire_dls:spatial_dataset_identifier_code) > 0 and string-length(@inspire_dls:spatial_dataset_identifier_namespace) > 0]");

log.info("queryExamples: " + queryExamples)

// Then run test for each example's values
for( i in queryExamples )
{   
   def id_namespace = i.attributes.getNamedItem("inspire_dls:spatial_dataset_identifier_namespace").getNodeValue()
   def id_code = i.attributes.getNamedItem("inspire_dls:spatial_dataset_identifier_code").getNodeValue()
   def availableCrs = i.attributes.getNamedItem("inspire_dls:crs").getNodeValue()
   // log.info(availableCrs)
   // construct the describe spatial dataset URL
   // now construct the url, take into account optional parameters( marked by a ? before })
   def describeDataSetUrl = props.getPropertyValue("describeSpatialDatasetUrl").replaceAll('\\?}','}')
   // fix for NGR: because asking for port 80 explicitly, causes an invalid HTTP request-error
   describeDataSetUrl = describeDataSetUrl.replace(":80","")
   describeDataSetUrl = describeDataSetUrl.replaceAll('\\{inspire_dls:spatial_dataset_identifier_namespace\\}',id_namespace)
   describeDataSetUrl = describeDataSetUrl.replaceAll('\\{inspire_dls:spatial_dataset_identifier_code\\}',id_code)
   describeDataSetUrl = describeDataSetUrl.replaceAll('\\{language\\}', props.getPropertyValue("firstLanguage"))
   log.info("The OpenSearch Description URL example: " + describeDataSetUrl)

   props.setPropertyValue("describeDataSetUrl",describeDataSetUrl)
   props.setPropertyValue("describeDataSetUrlEncoded",describeDataSetUrl.replaceAll('&amp;','&amp;amp;'))
   props.setPropertyValue("availableCrs", availableCrs)
   testRunner.runTestStepByName("ResolveDescribeDatasetUrl")
   
   // now get the CRS to create the request for getting the Dataset with the CRS parameter
   testRunner.runTestStepByName("PropertyTransferCRS")   

   // construct the getcribe spatial dataset URL
   // This test only request for one media type, so for one Url of rel="results"
   // now construct the url, take into account optional parameters( marked by a ? before })
   def dataSetUrl = props.getPropertyValue("getSpatialDatasetUrl").replaceAll('\\?}','}')
   // fix for NGR: because asking for port 80 explicitly, causes an invalid HTTP request-error
   dataSetUrl = dataSetUrl.replace(":80","")
   dataSetUrl = dataSetUrl.replaceAll('\\{inspire_dls:spatial_dataset_identifier_namespace\\}',id_namespace)
   dataSetUrl = dataSetUrl.replaceAll('\\{inspire_dls:spatial_dataset_identifier_code\\}',id_code)   
   dataSetUrl = dataSetUrl.replaceAll('\\{inspire_dls:crs\\}', availableCrs)
   dataSetUrl = dataSetUrl.replaceAll('\\{language\\}', props.getPropertyValue("firstLanguage"))
   
   props.setPropertyValue("dataSetUrl",dataSetUrl)
   props.setPropertyValue("dataSetUrlEncoded",dataSetUrl.replaceAll('&amp;','&amp;amp;'))
   testRunner.runTestStepByName("ResolveGetDatasetUrl")
}</script></con:config></con:testStep><con:testStep type="httprequest" name="ResolveDescribeDatasetUrl" id="8ad4a151-9ec6-4986-b9e1-3be207b14ca9"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="ResolveDescribeDatasetUrl" id="c7febe88-db34-4045-9ed8-47e8e46b566c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#describeDataSetUrl}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" name="Response starts within 30 seconds" id="2fc05bbf-6724-444b-bfc6-c16f9e5306a4"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-05##OSD_AtomReponse: Response is Atom feed with at least one category with a CRS" id="a1e2971e-c332-43a2-b093-9889f255c556"><con:configuration><path>declare namespace os='http://a9.com/-/spec/opensearch/1.1/';
declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

&lt;result>AssertionFailures:
{
let $nrcategories:=count(//atom:entry/atom:category[string-length(@term) > 0])
return
if ($nrcategories >0)
then ""
else "The describe dataset URL response of '${Properties#describeDataSetUrlEncoded}' is NOT an Atom feed with at least one category with a CRS."
}
&lt;/result></path><content>&lt;result>AssertionFailures:&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransferCRS" id="7e39051d-a84a-4425-b6ce-781a52f5cf98"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>availableCrs</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>ResolveDescribeDatasetUrl</con:sourceStep><con:sourcePath>declare namespace atom='http://www.w3.org/2005/Atom';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';

//atom:entry/atom:category[string-length(@term) > 0][1]/@term</con:sourcePath><con:targetType>availableCrs</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="ResolveGetDatasetUrl" id="193d16ab-d45a-47a9-aa31-f204050a1694"><con:settings/><con:config method="HEAD" xsi:type="con:HttpRequest" name="ResolveGetDatasetUrl" id="1a4b00c8-8809-4e12-a7b6-03be51cb319e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="${#mediaType}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#dataSetUrl}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" name="Response starts within 30 seconds" id="2fc05bbf-6724-444b-bfc6-c16f9e5306a4"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes: 200,206,301,302,303" id="942d2723-928b-42ae-b09a-4987a59b92ab"><con:configuration><codes>200,206,301,302,303</codes></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:properties><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../logs/traces/</con:value></con:property><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetOpenSearchDescription</con:value></con:property><con:property><con:name>etf.ShortDescription</con:name><con:value/></con:property><con:property><con:name>etf.Author</con:name><con:value>Thijs Brentjens</con:value></con:property><con:property><con:name>etf.LastEditor</con:name><con:value>Jon Herrmann</con:value></con:property><con:property><con:name>etf.ExpectedResults</con:name><con:value/></con:property><con:property><con:name>etf.CreationDate</con:name><con:value>2015-05-26T22:29:01.567+02:00</con:value></con:property><con:property><con:name>etf.LastUpdateDate</con:name><con:value>2015-05-26T22:29:01.567+02:00</con:value></con:property><con:property><con:name>etf.Version</con:name><con:value>1.0.0</con:value></con:property><con:property><con:name>etf.AssociatedRequirements</con:name><con:value/></con:property><con:property><con:name>etf.Status</con:name><con:value>IMPLEMENTED</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>etf.AssociatedRequirements</con:name><con:value>M-05</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>serviceEndpoint</con:name><con:value>http://none</con:value></con:property><con:property><con:name>serviceMetadataUrl</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MdIdentifiersList</con:name><con:value/></con:property><con:property><con:name>mdIdentifiersDatasetMetadata</con:name><con:value/></con:property><con:property><con:name>dataFeedXml</con:name><con:value/></con:property><con:property><con:name>serviceFeedXml</con:name><con:value/></con:property><con:property><con:name>openSearchDescriptionUrl</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>etf.ignore.properties</con:name><con:value>authUser, authPwd, authMethod, serviceFeedXml, dataFeedXml, serviceMetadataUrl, MdIdentifiersList, mdIdentifiersDatasetMetadata, openSearchDescriptionUrl</con:value></con:property><con:property><con:name>authUser</con:name><con:value/></con:property><con:property><con:name>authPwd</con:name><con:value/></con:property><con:property><con:name>authMethod</con:name><con:value>basic</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:beforeRunScript/><con:afterRunScript>import com.eviware.soapui.impl.wsdl.teststeps.HttpTestRequestStep;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep
import com.eviware.soapui.model.testsuite.TestStepResult;


// Get the "requirements" test step
def requirements = project.getTestSuiteByName("TestSetup")?.
	getTestCaseByName("Requirements")?.getTestStepByName("Requirements");

log.info("Results: ");
for( testSuiteR in runner?.getResults() ) {
	for( testCaseR in testSuiteR?.getResults() ) {
		for( testStepR in testCaseR?.getResults() ) {

			if(testStepR.getStatus()!=TestStepResult.TestStepStatus.OK) {
				if (testStepR.testStep instanceof HttpTestRequestStep || testStepR.testStep instanceof  RestTestRequestStep) {
					testStepR.testStep.testRequest.assertionList.each{
						// Extract ID which is seperated with a whitespace and a doublecolon
						String assertionName = it.name;
						if (assertionName.indexOf(": ") > -1) {	
							String id = assertionName?.substring( 0, assertionName.indexOf(": ") );
							if(it.valid) {
								log.info("Assertion "+assertionName+" passed");
							}else if(it.failed) {
								log.error("Assertion "+assertionName+" failed with error:");
								log.error("  -   "+it.getErrors()[0].getMessage());
								log.error("  -   Requirements:");
								
								// Todo: Save the requirements as an object in a map
								requirements.getPropertyList().each {
									log.info(it.getName())
									if(it.getName().contains(id)) {
										log.error("   -   "+it.getName()+" :" );
										log.error("        "+it.getValue());
									}
								}							
							}else{
								log.warn("Assertion "+assertionName+" is deactivated");
							}
						}
					}
				}
			}
		}
	}
}
</con:afterRunScript><con:sensitiveInformation/></con:soapui-project>