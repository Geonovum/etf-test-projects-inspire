<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="INSPIRE Download Service WFS 2_0_0 ISO19142 TG 3_1" resourceRoot="${projectDir}" soapui-version="4.6.4" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" id="174edf55-699b-446c-968c-1892a4d8d5bd" xmlns:con="http://eviware.com/soapui/config"><con:description>This test project checks an implementation of a WFS 2.0.0 / ISO 19142 service to the requirements that the INSPIRE Download Service Technical Guidance (TG version 3.1) lays down. It tests for mandatory and optional parts, for so-called predefined and direct access services.</con:description><con:settings/>
<con:testSuite name="TestSetup" id="60d32201-1ddf-4c37-83d8-450b584ffe1a"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Requirements" searchProperties="true" id="aac056b0-5ae5-4144-9f84-c872b6f9b280"><con:settings/><con:testStep type="groovy" name="Requirements" disabled="true" id="d379bfa3-2a4e-40b6-9934-f0de2261d8d5"><con:settings/><con:config><script>// Load Requierments properties

def projectroot = context.expand('${projectDir}')

File file = new File(projectroot+"\\RequirementsISO19142.txt")

def testCase = testRunner.testCase

// Delete all properties
/*testCase.propertyNames.each { name ->
	testCase.removeProperty name
}*/

// Load properties from file
testCase.addPropertiesFromFile(file.path)</script></con:config></con:testStep><con:properties><con:property><con:name>M-01##HTTPGET__Description</con:name><con:value>The Capabilities advertize the HTTP GET conformance class by advertizing the KVPEncoding in the Capabilities</con:value></con:property><con:property><con:name>M-01##HTTPGET__Name</con:name><con:value>HTTP GET advertized</con:value></con:property><con:property><con:name>M-01##HTTPGET__Reference</con:name><con:value>TG Requirement 48</con:value></con:property><con:property><con:name>M-01##INSPIRESchemaValid__Description</con:name><con:value>The Capabilities validate against the INSPIRE XML schema. This means that the Capabilities are valid WFS Capabilities and have the INSPIRE ExtendedCapabilities.</con:value></con:property><con:property><con:name>M-01##INSPIRESchemaValid__Name</con:name><con:value>Validate against INSPIRE schema</con:value></con:property><con:property><con:name>M-01##INSPIRESchemaValid__Reference</con:name><con:value>TG Requirement 53, 54, 58, 59, 60</con:value></con:property><con:property><con:name>M-01##INSPIRESchema__Description</con:name><con:value>The xsi:schemaLocation of the Capabilities document shall include the INSPIRE schema at http://inspire.ec.europa.eu/schemas/inspire_dls/1.0/inspire_dls.xsd</con:value></con:property><con:property><con:name>M-01##INSPIRESchema__Name</con:name><con:value>SchemaLocation contains INSPIRE schema</con:value></con:property><con:property><con:name>M-01##INSPIRESchema__Reference</con:name><con:value>TG Requirement 60</con:value></con:property><con:property><con:name>M-01##M-01-AccessConstraints__Description</con:name><con:value>The WFS AccessConstraints element is provided in the Capabilities</con:value></con:property><con:property><con:name>M-01##M-01-AccessConstraints__Name</con:name><con:value>WFS AccessConstraints exists</con:value></con:property><con:property><con:name>M-01##M-01-AccessConstraints__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-Conformity__Description</con:name><con:value>INSPIRE Conformity exists</con:value></con:property><con:property><con:name>M-01##M-01-Conformity__Name</con:name><con:value>INSPIRE Conformity exists</con:value></con:property><con:property><con:name>M-01##M-01-Conformity__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-ContactInfo__Description</con:name><con:value>The WFS ServiceProvider ContactInfo element is provided in the Capabilities</con:value></con:property><con:property><con:name>M-01##M-01-ContactInfo__Name</con:name><con:value>WFS ContactInfo exists</con:value></con:property><con:property><con:name>M-01##M-01-ContactInfo__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-DFT__Description</con:name><con:value>The response of a DescribeFeatureType request must be an XML Schema / XSD.  This is required for Simple WFS conformance.</con:value></con:property><con:property><con:name>M-01##M-01-DFT__Name</con:name><con:value>DescribeFeatureType XSD</con:value></con:property><con:property><con:name>M-01##M-01-DFT__Reference</con:name><con:value>TG Requirement 46</con:value></con:property><con:property><con:name>M-01##M-01-Fees__Description</con:name><con:value>The WFS Fees element is provided in the Capabilities</con:value></con:property><con:property><con:name>M-01##M-01-Fees__Name</con:name><con:value>WFS Fees exists</con:value></con:property><con:property><con:name>M-01##M-01-Fees__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-ft-MetadataURL__Description</con:name><con:value>Every FeatureType has a MetadataURL, refering to a INSPIRE metadata document, describing the dataset</con:value></con:property><con:property><con:name>M-01##M-01-ft-MetadataURL__Name</con:name><con:value>Every FeatureType has a MetadataURL</con:value></con:property><con:property><con:name>M-01##M-01-ft-MetadataURL__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-GetFeature__Description</con:name><con:value>Perform a GetFeature request and test if the result contains a wfs:FeatureCollection. This is required for Simple WFS conformance.</con:value></con:property><con:property><con:name>M-01##M-01-GetFeature__Name</con:name><con:value>GetFeature first TypeName</con:value></con:property><con:property><con:name>M-01##M-01-GetFeature__Reference</con:name><con:value>TG Requirement 46</con:value></con:property><con:property><con:name>M-01##M-01-GFI-4__Description</con:name><con:value>The gml:id of the Feature is the same for a GetFeatureById request if an gml:id from a GetFeature request is used</con:value></con:property><con:property><con:name>M-01##M-01-GFI-4__Name</con:name><con:value>SimpleWFSGetFeatureById comparison</con:value></con:property><con:property><con:name>M-01##M-01-GFI-4__Reference</con:name><con:value>TG Requirement 46</con:value></con:property><con:property><con:name>M-01##M-01-GFI-Listed__Description</con:name><con:value>ListStoredQueries advertizes GetFeatureById</con:value></con:property><con:property><con:name>M-01##M-01-GFI-Listed__Name</con:name><con:value>ListStoredQueries advertizes GetFeatureById. This is required for Simple WFS conformance.</con:value></con:property><con:property><con:name>M-01##M-01-GFI-Listed__Reference</con:name><con:value>TG Requirement 46</con:value></con:property><con:property><con:name>M-01##M-01-GFI__Description</con:name><con:value>Test for support for GetFeatureById. This is required for Simple WFS conformance.</con:value></con:property><con:property><con:name>M-01##M-01-GFI__Name</con:name><con:value>SimpleWFSGetFeatureById tests</con:value></con:property><con:property><con:name>M-01##M-01-GFI__Reference</con:name><con:value>TG Requirement 46</con:value></con:property><con:property><con:name>M-01##M-01-GML32__Description</con:name><con:value>Support GML 3.2 as outputformat, check the Capabilities if this is advertized as 'application/gml+xml; version=3.2'. This is required for Simple WFS conformance.</con:value></con:property><con:property><con:name>M-01##M-01-GML32__Name</con:name><con:value>Support GML 3.2</con:value></con:property><con:property><con:name>M-01##M-01-GML32__Reference</con:name><con:value>TG Requirement 46</con:value></con:property><con:property><con:name>M-01##M-01-ImplementsQuery__Description</con:name><con:value>Capabilities advertizes ImplementsQuery</con:value></con:property><con:property><con:name>M-01##M-01-ImplementsQuery__Name</con:name><con:value>Capabilities advertizes ImplementsQuery</con:value></con:property><con:property><con:name>M-01##M-01-ImplementsQuery__Reference</con:name><con:value>TG Requirement 47</con:value></con:property><con:property><con:name>M-01##M-01-infoFeatureAccessService__Description</con:name><con:value>INSPIRE Keyword infoFeatureAccessService exists</con:value></con:property><con:property><con:name>M-01##M-01-infoFeatureAccessService__Name</con:name><con:value>INSPIRE Keyword infoFeatureAccessService exists</con:value></con:property><con:property><con:name>M-01##M-01-infoFeatureAccessService__Reference</con:name><con:value>INSPIRE Metadata Regulation and TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-MD_fileIdentifier2__Description</con:name><con:value>The metadata document of the dataset, referenced from the service metadata, has a fileIdentifier</con:value></con:property><con:property><con:name>M-01##M-01-MD_fileIdentifier2__Name</con:name><con:value>Metadata has fileIdentifier</con:value></con:property><con:property><con:name>M-01##M-01-MD_fileIdentifier2__Reference</con:name><con:value>INSPIRE Metadata Implementing Rules: Technical Guidelines based on EN ISO 19115 and EN ISO 19119</con:value></con:property><con:property><con:name>M-01##M-01-MD_fileIdentifier__Description</con:name><con:value>The metadata document has a fileIdentifier</con:value></con:property><con:property><con:name>M-01##M-01-MD_fileIdentifier__Name</con:name><con:value>Metadata has fileIdentifier</con:value></con:property><con:property><con:name>M-01##M-01-MD_fileIdentifier__Reference</con:name><con:value>INSPIRE Metadata Implementing Rules: Technical Guidelines based on EN ISO 19115 and EN ISO 19119</con:value></con:property><con:property><con:name>M-01##M-01-MD_identifierInServiceMD__Description</con:name><con:value>The MD_Identifier of the dataset metadata exists in the Service Metadata</con:value></con:property><con:property><con:name>M-01##M-01-MD_identifierInServiceMD__Name</con:name><con:value>MD_Identifier exists in Service Metadata</con:value></con:property><con:property><con:name>M-01##M-01-MD_identifierInServiceMD__Reference</con:name><con:value>INSPIRE Metadata Implementing Rules: Technical Guidelines based on EN ISO 19115 and EN ISO 19119</con:value></con:property><con:property><con:name>M-01##M-01-MD_Identifier__Description</con:name><con:value>The MD_Identifier exists in the dataset metadata</con:value></con:property><con:property><con:name>M-01##M-01-MD_Identifier__Name</con:name><con:value>The MD_Identifier exists in the dataset metadata</con:value></con:property><con:property><con:name>M-01##M-01-MD_Identifier__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-MD_Metadata2__Description</con:name><con:value>The metadata of the dataset, referenced from the service metadata, has root element MD_Metadata</con:value></con:property><con:property><con:name>M-01##M-01-MD_Metadata2__Name</con:name><con:value>Metadata has root element MD_Metadata</con:value></con:property><con:property><con:name>M-01##M-01-MD_Metadata2__Reference</con:name><con:value>INSPIRE Metadata Implementing Rules: Technical Guidelines based on EN ISO 19115 and EN ISO 19119</con:value></con:property><con:property><con:name>M-01##M-01-MD_Metadata__Description</con:name><con:value>The metadata document has root element MD_Metadata</con:value></con:property><con:property><con:name>M-01##M-01-MD_Metadata__Name</con:name><con:value>Metadata has root element MD_Metadata</con:value></con:property><con:property><con:name>M-01##M-01-MD_Metadata__Reference</con:name><con:value>ISO19139 encoding, INSPIRE Metadata Implementing Rules: Technical Guidelines based on EN ISO 19115 and EN ISO 19119</con:value></con:property><con:property><con:name>M-01##M-01-MetadataDate__Description</con:name><con:value>INSPIRE MetadataDate exists</con:value></con:property><con:property><con:name>M-01##M-01-MetadataDate__Name</con:name><con:value>INSPIRE MetadataDate exists</con:value></con:property><con:property><con:name>M-01##M-01-MetadataDate__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-MetadataPointOfContact__Description</con:name><con:value>INSPIRE MetadataPointOfContact exists</con:value></con:property><con:property><con:name>M-01##M-01-MetadataPointOfContact__Name</con:name><con:value>INSPIRE MetadataPointOfContact exists</con:value></con:property><con:property><con:name>M-01##M-01-MetadataPointOfContact__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-ProviderName__Description</con:name><con:value>The WFS ServiceProvider ProviderName element is provided in the Capabilities</con:value></con:property><con:property><con:name>M-01##M-01-ProviderName__Name</con:name><con:value>WFS ProviderName exists</con:value></con:property><con:property><con:name>M-01##M-01-ProviderName__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-ResourceLocator__Description</con:name><con:value>The Capabilities provide the INSPIRE ResourceLocator in the ExtendedCapabilities</con:value></con:property><con:property><con:name>M-01##M-01-ResourceLocator__Name</con:name><con:value>INSPIRE ResourceLocator exists</con:value></con:property><con:property><con:name>M-01##M-01-ResourceLocator__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-ResourceType__Description</con:name><con:value>The Capabilities provide the INSPIRE ResourceType in the ExtendedCapabilities</con:value></con:property><con:property><con:name>M-01##M-01-ResourceType__Name</con:name><con:value>INSPIRE ResourceType exists</con:value></con:property><con:property><con:name>M-01##M-01-ResourceType__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-Schema__Description</con:name><con:value>Validate the Capabilities document against the declared schema. This schema is referenced in xsi:schemaLocation. [Disabled]</con:value></con:property><con:property><con:name>M-01##M-01-Schema__Name</con:name><con:value>Capabilities Schema validation</con:value></con:property><con:property><con:name>M-01##M-01-Schema__Reference</con:name><con:value>ISO19128</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD-validates__Description</con:name><con:value>The service metadata validates against the XML schema</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD-validates__Name</con:name><con:value>Service metadata XSD validation</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD-validates__Reference</con:name><con:value>ISO19139 encoding, INSPIRE Metadata Implementing Rules: Technical Guidelines based on EN ISO 19115 and EN ISO 19119</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD_MD_Metadata__Description</con:name><con:value>The service metadata has a root element MD_Metadata</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD_MD_Metadata__Name</con:name><con:value>Service metadata root MD_Metadata</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD_MD_Metadata__Reference</con:name><con:value>ISO19139 encoding, INSPIRE Metadata Implementing Rules: Technical Guidelines based on EN ISO 19115 and EN ISO 19119</con:value></con:property><con:property><con:name>M-01##M-01-SpatialDataServiceType__Description</con:name><con:value>The INSPIRE SpatialDataServiceType in the ExtendedCapabilities is set at 'download'</con:value></con:property><con:property><con:name>M-01##M-01-SpatialDataServiceType__Name</con:name><con:value>SpatialDataServiceType</con:value></con:property><con:property><con:name>M-01##M-01-SpatialDataServiceType__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-TemporalReference__Description</con:name><con:value>INSPIRE TemporalReference exists</con:value></con:property><con:property><con:name>M-01##M-01-TemporalReference__Name</con:name><con:value>INSPIRE TemporalReference exists</con:value></con:property><con:property><con:name>M-01##M-01-TemporalReference__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-URI__Description</con:name><con:value>INSPIRE Unique Resource Identifier of the dataset is provided</con:value></con:property><con:property><con:name>M-01##M-01-URI__Name</con:name><con:value>INSPIRE Unique Resource Identifier exists</con:value></con:property><con:property><con:name>M-01##M-01-URI__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-Warning-01__Description</con:name><con:value>If the service does not offer featuretypes, other tests will fail or can't be executed. This test gives a warning if no featuretypes are provided by the WFS</con:value></con:property><con:property><con:name>M-01##M-01-Warning-01__Name</con:name><con:value>The service offers featureTypes.</con:value></con:property><con:property><con:name>M-01##M-01-WFSAbstract__Description</con:name><con:value>Capabilities provide an Abstract alement</con:value></con:property><con:property><con:name>M-01##M-01-WFSAbstract__Name</con:name><con:value>WFS Abstract exists</con:value></con:property><con:property><con:name>M-01##M-01-WFSAbstract__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-WFSTitle__Description</con:name><con:value>Capabilities provide a Title element</con:value></con:property><con:property><con:name>M-01##M-01-WFSTitle__Name</con:name><con:value>WFS Title exists</con:value></con:property><con:property><con:name>M-01##M-01-WFSTitle__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01##M-01-WGS84BoundingBox__Description</con:name><con:value>Each FeatureType has a WGS84BoundingBox</con:value></con:property><con:property><con:name>M-01##M-01-WGS84BoundingBox__Name</con:name><con:value>Each FeatureType has a WGS84BoundingBox</con:value></con:property><con:property><con:name>M-01##M-01-WGS84BoundingBox__Reference</con:name><con:value>TG Requirement 53</con:value></con:property><con:property><con:name>M-01__Description</con:name><con:value>Test the WFS against requirements of a predefined WFS</con:value></con:property><con:property><con:name>M-01__Name</con:name><con:value>Predefined WFS</con:value></con:property><con:property><con:name>M-01__Reference</con:name><con:value>TG Chapter 6</con:value></con:property><con:property><con:name>O-02##GetPropValue__Description</con:name><con:value>Support GetPropertyValue. The GetPropertyValue request for this test is constructed with previous response to GetCapabilities and GetFeature requests.</con:value></con:property><con:property><con:name>O-02##GetPropValue__Name</con:name><con:value>GetPropertyValue</con:value></con:property><con:property><con:name>O-02##GetPropValue__Reference</con:name><con:value>TG Requirement 62</con:value></con:property><con:property><con:name>O-02##O-02-ComparisonOperators__Description</con:name><con:value>Capabilities advertize all ComparisonOperators: PropertyIsEqualTo, PropertyIsNotEqualTo, PropertyIsLessThan, PropertyIsGreaterThan, PropertyIsLessThanOrEqualTo, PropertyIsGreaterThanOrEqualTo</con:value></con:property><con:property><con:name>O-02##O-02-ComparisonOperators__Name</con:name><con:value>Capabilities advertize all ComparisonOperators</con:value></con:property><con:property><con:name>O-02##O-02-ComparisonOperators__Reference</con:name><con:value>TG Requirement 65</con:value></con:property><con:property><con:name>O-02##O-02-GetFeatureFalseID__Description</con:name><con:value>A GetFeature response with a non-existing identifier does not contain any Features (no wfs:member returned). For conformance to Resource Identification and AdHoc Query conformance classes</con:value></con:property><con:property><con:name>O-02##O-02-GetFeatureFalseID__Name</con:name><con:value>GetFeature response with non-existing identifier is empty</con:value></con:property><con:property><con:name>O-02##O-02-GetFeatureFalseID__Reference</con:name><con:value>TG Requirement 63, TG Requirement 64</con:value></con:property><con:property><con:name>O-02##O-02-ImplementsBasicWFS__Description</con:name><con:value>Capabilities advertizes ImplementsBasicWFS</con:value></con:property><con:property><con:name>O-02##O-02-ImplementsBasicWFS__Name</con:name><con:value>Capabilities advertizes ImplementsBasicWFS</con:value></con:property><con:property><con:name>O-02##O-02-ImplementsBasicWFS__Reference</con:name><con:value>TG Requirement 62</con:value></con:property><con:property><con:name>O-02##O-02-ImplementsMinStandardFilter__Description</con:name><con:value>Capabilities advertizes ImplementsMinStandardFilter</con:value></con:property><con:property><con:name>O-02##O-02-ImplementsMinStandardFilter__Name</con:name><con:value>Capabilities advertizes ImplementsMinStandardFilter</con:value></con:property><con:property><con:name>O-02##O-02-ImplementsMinStandardFilter__Reference</con:name><con:value>TG Requirement 65</con:value></con:property><con:property><con:name>O-02##O-02-LogicalOperators__Description</con:name><con:value>Capabilities advertize logical operators</con:value></con:property><con:property><con:name>O-02##O-02-LogicalOperators__Name</con:name><con:value>Capabilities advertize logical operators</con:value></con:property><con:property><con:name>O-02##O-02-LogicalOperators__Reference</con:name><con:value>TG Requirement 65</con:value></con:property><con:property><con:name>O-02##O-02-MinTemporalFilter__Description</con:name><con:value>Capabilities advertizes ImplementsMinTemporalFilter, this is required for the support of the Minimum Temporal Filter Conformance Class</con:value></con:property><con:property><con:name>O-02##O-02-MinTemporalFilter__Name</con:name><con:value>Capabilities advertizes ImplementsMinTemporalFilter</con:value></con:property><con:property><con:name>O-02##O-02-MinTemporalFilter__Reference</con:name><con:value>TG Requirement 67</con:value></con:property><con:property><con:name>O-02##O-02-PropertyIsEqualTo__Description</con:name><con:value>PropertyIsEqualTo works correctly: response contains only Features of which the first textual property contains the requested value of PropertyIsEqualTo. A GetpropertyValue request is used to construct the PropertyIsEqualTo filter for this test.</con:value></con:property><con:property><con:name>O-02##O-02-PropertyIsEqualTo__Name</con:name><con:value>PropertyIsEqualTo works correctly</con:value></con:property><con:property><con:name>O-02##O-02-PropertyIsEqualTo__Reference</con:name><con:value>TG Requirement 65</con:value></con:property><con:property><con:name>O-02##O-02-ResourceIdentification__Description</con:name><con:value>Capabilities advertizes fes:ResourceId (ResourceIdentification)</con:value></con:property><con:property><con:name>O-02##O-02-ResourceIdentification__Name</con:name><con:value>Capabilities advertizes ResourceIdentification</con:value></con:property><con:property><con:name>O-02##O-02-ResourceIdentification__Reference</con:name><con:value>TG Requirement 64</con:value></con:property><con:property><con:name>O-02##O-02-SpatialOperatorBBOX__Description</con:name><con:value>SpatialOperator BBOX is declared in the Capabilities</con:value></con:property><con:property><con:name>O-02##O-02-SpatialOperatorBBOX__Name</con:name><con:value>SpatialOperator BBOX is declared</con:value></con:property><con:property><con:name>O-02##O-02-SpatialOperatorBBOX__Reference</con:name><con:value>=TG Requirement 66</con:value></con:property><con:property><con:name>O-02##XPathAdvertized__Description</con:name><con:value>The Capabilities advertize support for XPath</con:value></con:property><con:property><con:name>O-02##XPathAdvertized__Name</con:name><con:value>XPath advertized</con:value></con:property><con:property><con:name>O-02##XPathAdvertized__Reference</con:name><con:value>TG Requirement 68</con:value></con:property><con:property><con:name>O-02##XPath__Description</con:name><con:value>Minimum Xpath is supported. A GetFeature request with an XPath in it, must return a valid response</con:value></con:property><con:property><con:name>O-02##XPath__Name</con:name><con:value>Minimum Xpath</con:value></con:property><con:property><con:name>O-02##XPath__Reference</con:name><con:value>TG Requirement 68</con:value></con:property><con:property><con:name>O-02__Description</con:name><con:value>Test the WFS against requirements of a Direct Access WFS (optional)</con:value></con:property><con:property><con:name>O-02__Name</con:name><con:value>DirectAccess WFS</con:value></con:property><con:property><con:name>O-02__Reference</con:name><con:value>TG Chapter 7</con:value></con:property><con:property><con:name>M-01##M-01-StoredQueryINSPIRE__Name</con:name><con:value>INSPIRE StoredQuery available</con:value></con:property><con:property><con:name>M-01##M-01-StoredQueryINSPIRE__Description</con:name><con:value>Pre-defined Stored Queries shall be provided to make pre-defined datasets available. Pre-defined Stored Queries shall use the parameter names 'CRS', 'DataSetIdCode', 'DataSetIdNamespace' and 'Language' to identify the CRS, dataset ID code, dataset ID namespace and language components of a query.</con:value></con:property><con:property><con:name>M-01##M-01-StoredQueryINSPIRE__Reference</con:name><con:value>TG Requirement 49, 50, 51</con:value></con:property><con:property><con:name>O-02##O-02-GetPropertyValue__Description</con:name><con:value>Support GetPropertyValue. The GetPropertyValue request for this test is constructed with previous response to GetCapabilities and GetFeature requests. For this test it is used to construct a Filter and test the</con:value></con:property><con:property><con:name>O-02##O-02-GetPropertyValue__Name</con:name><con:value>GetPropertyValue to construct a Filter</con:value></con:property><con:property><con:name>O-02##O-02-GetPropertyValue__Reference</con:name><con:value>TG Requirement 62</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD_coupledResource__Name</con:name><con:value>Metadata contains a coupled resource (srv:operatesOn)</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD_coupledResource__Description</con:name><con:value>Because the metadata describes the service, there must be a coupled resource.</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD_coupledResource__Reference</con:name><con:value>TG Metadata, 2.2.6, req 7; Implementing Rule Metadata Part B. 1.6</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD_coupledResourceHref__Name</con:name><con:value>srv:operatesOn contains a reference to a metadata document</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD_coupledResourceHref__Description</con:name><con:value>srv:operatesOn contains a reference to a metadata document, through the xlink:href attribute</con:value></con:property><con:property><con:name>M-01##M-01-ServiceMD_coupledResourceHref__Reference</con:name><con:value>TG Metadata, 2.2.6, req 7; Implementing Rule Metadata Part B. 1.6</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Transfer Global Properties" searchProperties="true" id="e3a825b0-06cb-4211-b695-4e39a43bcb5e"><con:settings/>
<con:testStep type="transfer" name="Transfer Global Properties" id="64747922-4995-4629-9568-f21aa9de1953">
  <con:settings/>
  <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="false" ignoreEmpty="true" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false">
      <con:name>serviceEndpoint</con:name>
      <con:sourceType>DS.serviceEndpoint</con:sourceType>
      <con:sourceStep>#Global#</con:sourceStep>
      <con:targetType>serviceEndpoint</con:targetType>
      <con:targetStep>#Project#</con:targetStep>
    <con:upgraded>true</con:upgraded></con:transfers>
    <con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="false" disabled="false" entitize="false" ignoreEmpty="true" transferChildNodes="false" transferToAll="false" useXQuery="false">
      <con:name>basicAuthUser</con:name>
      <con:sourceType>DS.basicAuthUser</con:sourceType>
      <con:sourceStep>#Global#</con:sourceStep>
      <con:sourcePath xsi:nil="true"/>
      <con:targetType>authUser</con:targetType>
      <con:targetStep>#Project#</con:targetStep>
      <con:targetPath xsi:nil="true"/>
    <con:upgraded>true</con:upgraded></con:transfers>
    <con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="false" disabled="false" entitize="false" ignoreEmpty="true" transferChildNodes="false" transferToAll="false" useXQuery="false">
      <con:name>basicAuthPwd</con:name>
      <con:sourceType>DS.basicAuthPwd</con:sourceType>
      <con:sourceStep>#Global#</con:sourceStep>
      <con:sourcePath xsi:nil="true"/>
      <con:targetType>authPwd</con:targetType>
      <con:targetStep>#Project#</con:targetStep>
      <con:targetPath xsi:nil="true"/>
    <con:upgraded>true</con:upgraded></con:transfers>




    <con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="false" disabled="false" entitize="false" ignoreEmpty="true" transferChildNodes="false" transferToAll="false" useXQuery="false">
      <con:name>featureTypeList</con:name>
      <con:sourceType>DS.FeatureTypeList</con:sourceType>
      <con:sourceStep>#Global#</con:sourceStep>
      <con:sourcePath xsi:nil="true"/>
      <con:targetType>featureTypeList</con:targetType>
      <con:targetStep>#Project#</con:targetStep>
      <con:targetPath xsi:nil="true"/>
    <con:upgraded>true</con:upgraded></con:transfers>
    <con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="false" disabled="false" entitize="false" ignoreEmpty="true" transferChildNodes="false" transferToAll="false" useXQuery="false">
      <con:name>srsnamelist</con:name>
      <con:sourceType>DS.srsnamelist</con:sourceType>
      <con:sourceStep>#Global#</con:sourceStep>
      <con:sourcePath xsi:nil="true"/>
      <con:targetType>srsnamelist</con:targetType>
      <con:targetStep>#Project#</con:targetStep>
      <con:targetPath xsi:nil="true"/>
    <con:upgraded>true</con:upgraded></con:transfers>










  <con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="false" ignoreEmpty="true" transferToAll="false" entitize="false" useXQuery="false" transferChildNodes="false"><con:name>excludeFeatureTypes</con:name><con:sourceType>DS.excludeFeatureTypes</con:sourceType><con:sourceStep>#Global#</con:sourceStep><con:targetType>excludeFeatureTypes</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep>
<con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Credentials" searchProperties="true" id="2b3a4dcc-4f11-45d7-951b-ad32d5566eee"><con:settings/><con:testStep type="groovy" name="Update Credentials" id="2ede31ba-8713-4f08-a67d-fa2a24b0d156"><con:settings/><con:config><script>import de.interactive_instruments.xtf.Util;

/** Set the credentials only if a username is provided */
def basicAuthUser = context.expand('${#Project#authUser}');
if (basicAuthUser.length()>0) {
	log.info("Setting credentials for user: " + basicAuthUser);
}
Util.updateCredentials(testRunner);
</script></con:config>
</con:testStep>
<con:properties/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Query Params" searchProperties="true" id="f7699a08-ecb3-4f93-afc9-650448302524"><con:settings/><con:testStep type="groovy" name="UpdateQueryParams" id="8a9b24eb-721a-4a4f-8c00-bc47be24e65b"><con:settings/><con:config><script>// if any non-WMS parameters are found, add them to the GetCapabilities request
// author: Thijs Brentjens

import com.eviware.soapui.impl.wsdl.teststeps.*;

c = testRunner.getRunContext();

URL endpoint = new URL(c.expand('${#Project#serviceEndpoint}'));
if (endpoint.getQuery()) {
    def queryParams = endpoint.getQuery().split("&amp;");

    // default params for GetCapabilities:
    // filter out version
    def defaultParamsGetCaps = ["acceptversions","service","request","language"];

    for (p in queryParams) {
        for (d in defaultParamsGetCaps) {
            if (p.split("=")[0].toLowerCase() == d) {
                queryParams = queryParams - p;
            }
        }
        log.debug("Queryparams from serviceEndpoint cleaned. Aditional queryparams left: " + queryParams);
    }

    // For REST requests, add additional query parameters
    // Here for GetCapabilities only
    if (queryParams.length > 0) {
        // for GetCapabilities: update all requests with other parameters from the serviceEndpoint
        for( testSuite in testRunner.testCase.testSuite.project.getTestSuiteList() ) {
            for( testCase in testSuite.getTestCaseList() ) {
                for( testStep in testCase.getTestStepList() ) {
                    if( testStep instanceof HttpTestRequestStep ) {
                        // First: cleanup old extra params, if the tests have been saved with aditional params a previous time
                        if (testStep.getName()=="GetCapabilities") {
                            // first remove any other params
                            for (prop in testStep.getHttpRequest().getProperties()) {
                                    defaultParam = 0;
                                    log.debug("HTTP param: " + prop.getKey())
                                    for (d in defaultParamsGetCaps) {
                                    if (prop.getKey().toLowerCase() == d) {
                                        defaultParam = 1;
                                    }
                                }
                                // if not a defaultParam, remove it
                                if (defaultParam == 0) {
                                        testStep.getHttpRequest().removeProperty(prop.getKey());
                                        log.debug("Removed non-standard query parameter from the request: " + prop.getKey())
                                }
                            }
                            // now add the extra params from the query string
                            for (q in queryParams) {
                                    def pair = q.split("=");
                                    testStep.getHttpRequest().addProperty(pair[0]);
                                    testStep.getHttpRequest().setPropertyValue(pair[0], pair[1]);
                                    log.debug("Added non-standard query parameter for the Getcapabilities requests: " + pair[0] + "=" + pair[1])
                            }
                        }
                    }
                }
            }
        };
    }

}

</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="M-01 - PredefinedWFS" id="10a80d5c-d622-4be3-ae0f-a5772f1b5072"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SimpleWFS - HTTP GET - Mandatory" searchProperties="true" id="1863b227-0f7f-4d33-8c5b-09b674dc8020"><con:settings/><con:testStep type="properties" name="Properties" id="5acd037a-b1a7-44a6-9c52-d6882b785dcd"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Capabilities</con:name><con:value/></con:property><con:property><con:name>DescribeFeatureTypeURL</con:name><con:value/></con:property><con:property><con:name>typeNames</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="GetCapabilities" id="f989e644-8b9e-420a-a329-064ee28596ff"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="4ba51ef7-8ccf-4328-9f1d-6c38f7df655b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="WFS is version 2.0.0" id="ff462c40-14eb-4323-ad6d-85774251e692"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';

&lt;result>AssertionFailures: {
let $version:=//wfs:WFS_Capabilities[@version='2.0.0']
return
if (exists($version))
then ""
else "WFS is not version 2.0.0"
}
&lt;/result></path><content>&lt;result>AssertionFailures: &lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-Warning-01: Check for featureTypes (warning)" id="7699068e-d51a-4901-8542-bb8ab94b6c66"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $featureTypes:=//wfs:FeatureTypeList/wfs:FeatureType
return
if (count($featureTypes) > 0)
then "The service offers featureTypes."
else "The service does not seem to offer any featureType. Other tests will fail."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The service offers featureTypes.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##HTTPGET: HTTP GET Declared" id="7aca2f78-6f53-4292-93b0-75530ffaf61b"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';

&lt;result>AssertionFailures: {
let $httpget:=//ows:Constraint[@name='KVPEncoding' and ./ows:DefaultValue='TRUE']
return
if (exists($httpget))
then "HTTP Get is declared."
else "HTTP Get is NOT declared in the Capabilities."
}
&lt;/result></path><content>&lt;result>AssertionFailures: HTTP Get is declared.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-GML32: WFS supports GML 3.2 outputformat &quot;application/gml+xml; version=3.2&quot;" id="5fc9f0b6-69f8-45e4-8285-3e254210ac8e"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';

&lt;result>AssertionFailures: {
let $gml32output:=//ows:Parameter[@name='outputFormat']/ows:AllowedValues/ows:Value[.='application/gml+xml; version=3.2']
return
if (exists($gml32output))
then "The outputformat 'application/gml+xml; version=3.2' is declared in the Capabilities."
else "The WFS does not seem to support GML 3.2 as outputformat. The Capabilities do NOT advertize support for 'application/gml+xml; version=3.2'."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The outputformat 'application/gml+xml; version=3.2' is declared in the Capabilities.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter><con:parameter><con:name>NAMESPACES</con:name></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="1e261b5b-65cb-4de3-a8c0-6b37c1df8335"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="false" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Capabilities</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath/><con:targetType>Capabilities</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>DescribeFeatureTypeURL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';

//ows:Operation[@name='DescribeFeatureType'][1]/ows:DCP/ows:HTTP/ows:Get/@xlink:href</con:sourcePath><con:targetType>DescribeFeatureTypeURL</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="RunDescribeFeatureTypesForAllFeatureTypes" id="c9b078cc-9d52-4738-b54f-2fa7d449edb1"><con:settings/><con:config><script>props = testRunner.testCase.testSteps['Properties']

// log.info("Caps: " + props.getPropertyValue("Capabilities"))
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def capsXmlHolder = groovyUtils.getXmlHolder(props.getPropertyValue("Capabilities"))
capsXmlHolder.namespaces["wfs"] = "http://www.opengis.net/wfs/2.0";
capsXmlHolder.namespaces["ows"] = "http://www.opengis.net/ows/1.1";
capsXmlHolder.namespaces["gml"] = "http://www.opengis.net/gml/3.2";
capsXmlHolder.namespaces["fes"] = "http://www.opengis.net/fes/2.0";
capsXmlHolder.namespaces["xlink"] = "http://www.w3.org/1999/xlink";

//Pull out the dataSetUrlNodes
def featureTypeNodes = capsXmlHolder.getNodeValues("//wfs:FeatureTypeList/wfs:FeatureType/wfs:Name");
log.debug("featureTypeNodes: " + featureTypeNodes);

// then run Feed test for each dataSetUrl
for( i in featureTypeNodes )
{

   log.info("Executing DescribeFeatureType for featureType: " + i)
   props.setPropertyValue("typeNames",i)
   testRunner.runTestStepByName("DescribeFeatureType")
}
// skip the next step..
testRunner.gotoStepByName("Property Transfer (Finish)");
</script></con:config></con:testStep><con:testStep type="httprequest" name="DescribeFeatureType" id="c580e710-4092-48f7-a08e-349e776a3707"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="DescribeFeatureType" id="2ecb7015-8dbc-40f9-b0e6-39e7266aa9ef" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#DescribeFeatureTypeURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-01##M-01-DFT: Response contains XSD Schema element" id="9b2b335a-b4a4-4931-af6d-7960a66f37de"><con:configuration><path>declare namespace xsd='http://www.w3.org/2001/XMLSchema';

&lt;result>AssertionFailures: {
let $xsd:=/xsd:schema
return
if (exists($xsd))
then "The DescribeFeatureType response is an XML Schema."
else "The DescribeFeatureType response is NOT an XML Schema."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The DescribeFeatureType response is an XML Schema.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>DescribeFeatureType</con:value></con:parameter><con:parameter><con:name>typeNames</con:name><con:value>${#typeNames}</con:value></con:parameter><con:parameter><con:name>outputformat</con:name><con:value>application/gml+xml; version=3.2</con:value></con:parameter><con:parameter><con:name>typeName</con:name><con:value>${#typeNames}</con:value></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer (Finish)" id="b527689a-39ef-470b-a2c0-3a27063c7d1c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetCapabilities</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>M-01##M-01-Warning-01###M-01##M-01-Schema###M-01##HTTPGET###M-01##M-01-GML32</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SimpleWFS GetFeatureById support - Mandatory" searchProperties="true" id="773034ad-93a2-4039-a314-106b0d7ace7b"><con:settings/><con:testStep type="properties" name="Properties" id="b704b6b0-dc90-48d5-ae81-6f36cce29a82"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Capabilities</con:name><con:value/></con:property><con:property><con:name>typeNames</con:name><con:value/></con:property><con:property><con:name>ListStoredQueriesURL</con:name><con:value/></con:property><con:property><con:name>GetFeatureURL</con:name><con:value/></con:property><con:property><con:name>FirstFeature</con:name><con:value/></con:property><con:property><con:name>FirstFeatureId</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="GetCapabilities" id="4750e4a3-e67e-4243-b2a5-a96f236cb406"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="245b125a-7978-40c3-9e8e-032057875b70" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" name="Timely reponse" id="0c553d36-3816-49c9-8f05-0071278e8a6a"><con:configuration><SLA>10000</SLA></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="b342143a-0735-4a14-a9eb-06bfce467de7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="false" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>Capabilities</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath/><con:targetType>Capabilities</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>ListStoredQueriesURL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';

//ows:Operation[@name='ListStoredQueries'][1]/ows:DCP/ows:HTTP/ows:Get/@xlink:href</con:sourcePath><con:targetType>ListStoredQueriesURL</con:targetType><con:targetStep>Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false"><con:name>GetFeatureURL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';

//ows:Operation[@name='GetFeature'][1]/ows:DCP/ows:HTTP/ows:Get/@xlink:href</con:sourcePath><con:targetType>GetFeatureURL</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" transferToAll="false"><con:name>FiresFeatureTypeName</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';

(//wfs:FeatureTypeList/wfs:FeatureType[not(contains(',${#Project#excludeFeatureTypes},',concat(',',./wfs:Name,',')))]/wfs:Name)[1]</con:sourcePath><con:targetType>FirstFeatureTypeName</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="ListStoredQueries" id="fd7ade1e-d1c8-45f1-a275-cc8fcb5df9e3"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="ListStoredQueries" id="70c6fbbb-4ea1-4bec-bc56-f2db5edf0690" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoint>${#ListStoredQueriesURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-01##M-01-GFI-Listed: ListStoredQueries advertizes GetFeatureById" id="5b7e0db4-7ae5-46ea-8919-1acc759e2932"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';

&lt;result>AssertionFailures: {
let $getFeatureById:=/wfs:ListStoredQueriesResponse/wfs:StoredQuery[@id='urn:ogc:def:query:OGC-WFS::GetFeatureById']
let $ampersand := '&amp;#38;'
return
if (exists($getFeatureById))
then "The StoredQuery for GetFeatureById ('urn:ogc:def:query:OGC-WFS::GetFeatureById') is listed."
else "The StoredQuery for GetFeatureById (with identifier 'urn:ogc:def:query:OGC-WFS::GetFeatureById') is NOT listed. Check the ListStoredQueries response."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The StoredQuery for GetFeatureById ('urn:ogc:def:query:OGC-WFS::GetFeatureById') is listed.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>ListStoredQueries</con:value></con:parameter><con:parameter><con:name>filter</con:name></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GetFeatureFirstTypeName" id="86776f04-4647-48c5-b672-8008608121cf"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetFeatureFirstTypeName" id="6fa9f236-8de1-49d9-b28e-1d4631c12819" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoint>${#Project#GetFeatureURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-01##M-01-GetFeature: Result contains wfs_FeatureCollection" id="eb22898f-0a5d-44f2-b800-f9c0d90ef42e"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';

&lt;result>AssertionFailures: {
let $fc:=//wfs:FeatureCollection
return
if (exists($fc))
then "The result contains a wfs:FeatureCollection."
else "The result does NOT contain a wfs:FeatureCollection."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The result contains a wfs:FeatureCollection.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetFeature</con:value></con:parameter><con:parameter><con:name>typeNames</con:name><con:value>${#Project#FirstFeatureTypeName}</con:value></con:parameter><con:parameter><con:name>count</con:name><con:value>1</con:value></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Feature" id="e44cc0a6-fec9-4728-9a47-c443c7a32ebd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="false" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="true"><con:name>FirstFeature</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetFeatureFirstTypeName</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';

//wfs:member[1]/*</con:sourcePath><con:targetType>FirstFeature</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" transferToAll="false" entitize="false"><con:name>FirstFeatureId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetFeatureFirstTypeName</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';

//wfs:member[1]/*/@gml:id</con:sourcePath><con:targetType>FirstFeatureId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="GetFeatureById" id="fb6b0c2f-2e5f-41a9-add5-8486c05df1f0"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetFeatureById" id="38f587ef-a7f4-4154-a8ab-463708e4ca3f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoint>${#Project#GetFeatureURL}</con:endpoint><con:request/><con:assertion type="XPath Match" name="M-01##M-01-GFI-4: The gml:id of the Feature is the same for GetFeature and GetFeatureById" id="87910727-d328-432a-88fd-8100b7a92c50"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';

exists(//*[@gml:id='${#Project#FirstFeatureId}'])</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetFeature</con:value></con:parameter><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>storedquery_id</con:name><con:value>urn:ogc:def:query:OGC-WFS::GetFeatureById</con:value></con:parameter><con:parameter><con:name>outputformat</con:name><con:value>application/gml+xml; version=3.2</con:value></con:parameter><con:parameter><con:name>id</con:name><con:value>${#Project#FirstFeatureId}</con:value></con:parameter><con:parameter><con:name>typenames</con:name><con:value>${#Project#FirstFeatureTypeName}</con:value></con:parameter></con:parameters></con:config></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>ListStoredQueries</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>M-01##M-01-GFI-Listed###M-01##M-01-GetFeature</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Query support - Mandatory" searchProperties="true" id="49c1a71f-ee14-4270-b278-21be6dd956ea"><con:settings/><con:testStep type="properties" name="Properties" id="03cb5e34-836e-4ce1-b21e-8df1112327b9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>DescribeStoredQueriesURL</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="GetCapabilities" id="2f1f86aa-0dc1-43a0-9053-269c5500e814"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="1c4330b8-5241-48d0-bea8-10c3f96e8c55" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-01##M-01-ImplementsQuery: Capabilities advertizes ImplementsQuery (Query support)" id="cd211d37-3f02-4565-bcde-6d7af7672a76"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $query:=//fes:Constraint[@name='ImplementsQuery' and ./ows:DefaultValue='TRUE']
return
if (exists($query))
then "The Capabilities document advertizes support for ImplementsQuery (Query support)."
else "The Capabilities document does NOT advertize support for ImplementsQuery (Query support). Check if the Constraint ImplementsQuery is present."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The Capabilities document advertizes support for ImplementsQuery (Query support).&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter><con:parameter><con:name>NAMESPACES</con:name></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="f7e7f2ee-d470-4b32-9400-7644fc4c1c44"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>DescribeStoredQueriesURL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';

//ows:Operation[@name='DescribeStoredQueries'][1]/ows:DCP/ows:HTTP/ows:Get/@xlink:href</con:sourcePath><con:targetType>Endpoint</con:targetType><con:targetStep>DescribeStoredQueries</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="DescribeStoredQueries" id="64e1a4d0-0cf4-4dc3-a5ee-1f538884f561"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="DescribeStoredQueries" id="a4b63ca6-b8fb-4bb9-885c-47fdcdae8ef9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint/><con:request/><con:assertion type="XQuery Match" name="M-01##M-01-StoredQueryINSPIRE: DescribeStoredQueries contains more StoredQueries (with parameters CRS/DataSetID/Language) besides GetFeatureById" id="f97ccebc-0e82-44ed-8acb-73d85849e2cb"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $query:=/wfs:DescribeStoredQueriesResponse/wfs:StoredQueryDescription[@id!='urn:ogc:def:query:OGC-WFS::GetFeatureById'][exists(./wfs:Parameter/@name='CRS')][exists(./wfs:Parameter/@name='DataSetId') or (exists(./wfs:Parameter/@name='DataSetIdCode') and exists(./wfs:Parameter/@name='DataSetIdNamespace'))][exists(./wfs:Parameter/@name='Language')]
return
if (exists($query))
then "DescribeStoredQueries contains more StoredQueries (with parameters CRS/DataSetID/Language) besides the StoredQuery GetFeatureById."
else "DescribeStoredQueries does NOT contain a StoredQuery with parameters CRS/DataSetID/Language, to download the entire INSPIRE dataset. Check the DescribeStoredQueries response."
}
&lt;/result></path><content>&lt;result>AssertionFailures: DescribeStoredQueries contains more StoredQueries (with parameters CRS/DataSetID/Language) besides the StoredQuery GetFeatureById.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>REQUEST</con:name><con:value>DescribeStoredQueries</con:value></con:parameter><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter></con:parameters></con:config></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>DescribeStoredQueries</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>M-01##M-01-ImplementsQuery</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Mandatory INSPIRE GetCapabilities" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1ce771c8-5f56-4a07-830e-4bb7369c7fce"><con:settings/><con:testStep type="properties" name="Transfer_Properties" id="18cd52f9-c0b7-4df3-80ee-421bb6892799"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Capabilities</con:name><con:value/></con:property><con:property><con:name>urlToTest</con:name><con:value/></con:property><con:property><con:name>ServiceMetadataRecord</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="GetCapabilities" id="659adf30-89fd-46f7-8ccc-58ae9b9e6e88"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="e5ecc0ba-c1b9-44f8-a72f-e50687af8c41" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" name="Response SLA" id="4abe4ace-2d1c-4e07-8b8d-023350f7507b"><con:configuration><SLA>5000</SLA></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Timeout" id="aeaf18a5-cddb-41b5-a649-b88c537c5e76"><con:configuration><scriptText>// check response time
log.info( "time taken was :" + messageExchange.timeTaken );</scriptText></con:configuration></con:assertion><con:assertion type="Simple Schema Validator" name="M-01##INSPIRESchemaValid: Simple Schema Validator" id="5a8187a7-5640-4351-a76b-af9a8209903c"><con:configuration><pathToXSD>xsi:schemaLocation</pathToXSD></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##INSPIRESchema: xsi:schemaLocation contains the INSPIRE Download Services schema" id="b01b9234-4901-4268-8172-015e86da241e"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $inspireSchemLocation:=//*[contains(@xsi:schemaLocation,'http://inspire.ec.europa.eu/schemas/inspire_dls/1.0/inspire_dls.xsd')]
return
if (exists($inspireSchemLocation))
then "The Capabilities contain a xsi:schemaLocation with the INSPIRE Download Services schema."
else "The Capabilities do not contain a xsi:schemaLocation with the INSPIRE Download Services schema: 'http://inspire.ec.europa.eu/schemas/inspire_dls/1.0/inspire_dls.xsd'."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The Capabilities contain a xsi:schemaLocation with the INSPIRE Download Services schema.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="4d52b15e-a974-4f9d-b60d-f2794395f56a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="true" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>INSPIREServiceMetadataUrl</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

//inspire_dls:ExtendedCapabilities[1]/inspire_common:MetadataUrl/inspire_common:URL</con:sourcePath><con:targetType>Endpoint</con:targetType><con:targetStep>Req 42 (Scenario 1) ExternalServiceMetadata</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false"><con:name>GetCapabilitiesURL from Capabilities</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

//ows:Operation[@name='GetCapabilities'][1]/ows:DCP/ows:HTTP/ows:Get/@xlink:href</con:sourcePath><con:targetType>Endpoint</con:targetType><con:targetStep>Req 42 (Scenario 2) CapabilitiesServiceMetadata</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false"><con:name>Capabilities</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath/><con:targetType>Capabilities</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto Scenario 1 ExternalServiceMetadata" id="e6a2f44d-c422-4141-96ce-cd6b62f24f09"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>ExternalServiceMetadata</con:name><con:type>XPATH</con:type><con:expression>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

string-length(//inspire_dls:ExtendedCapabilities/inspire_common:MetadataUrl/inspire_common:URL)>0</con:expression><con:targetStep>Req 42 (Scenario 1) ExternalServiceMetadata</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="httprequest" name="Req 42 (Scenario 2) CapabilitiesServiceMetadata" id="7ca355c9-7144-4262-90dc-acebb4847157"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Req 42 (Scenario 2) CapabilitiesServiceMetadata" id="43b2ce0a-c123-44d9-afd6-00634d234a87" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#getCapabilitiesURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-01##M-01-infoFeatureAccessService: INSPIRE Keyword infoFeatureAccessService exists" id="ba503ac6-b5d2-4618-b03e-50d7df5f607c"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $infoFeatureAccessService:=/wfs:WFS_Capabilities/ows:ServiceIdentification/ows:Keywords[ows:Keyword='infoFeatureAccessService']
return
if (exists($infoFeatureAccessService))
then "The INSPIRE keyword infoFeatureAccessService is advertized in the Capabilities."
else "The INSPIRE keyword infoFeatureAccessService is NOT advertized in the Capabilities."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The INSPIRE keyword infoFeatureAccessService is advertized in the Capabilities.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-WFSTitle: WFS Title exists" id="599e97b1-1a5f-46cf-aaaf-8c1b9f4064ac"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=/wfs:WFS_Capabilities/ows:ServiceIdentification/ows:Title
return
if (exists($value))
then "The WFS Title exists."
else "The WFS Title is not set in the Capabilities."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The WFS Title exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-WFSAbstract: WFS Abstract exists" id="eb865dd5-b25a-415e-a045-228477e3c915"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=/wfs:WFS_Capabilities/ows:ServiceIdentification/ows:Abstract
return
if (exists($value))
then "The WFS Abstract exists."
else "The WFS Abstract is not set in the Capabilities."
}
&lt;/result></path><content>&lt;result>AssertionFailures: The WFS Abstract exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-ResourceType: INSPIRE ResourceType exists" id="e388497f-20a5-4ff7-b95f-519560456c1b"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//inspire_dls:ExtendedCapabilities/inspire_common:ResourceType
return
if (exists($value))
then "INSPIRE ResourceType exists."
else "INSPIRE ResourceType is not set in the Capabilities. Check the INSPIRE ExtendedCapabilities."
}
&lt;/result></path><content>&lt;result>AssertionFailures: INSPIRE ResourceType exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-ResourceLocator: INSPIRE ResourceLocator exists" id="507959dc-7543-40bd-afc1-2b855e50c12c"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//inspire_dls:ExtendedCapabilities/inspire_common:ResourceLocator
return
if (exists($value))
then "INSPIRE ResourceLocator exists."
else "INSPIRE ResourceLocator is not set in the Capabilities. Check the INSPIRE ExtendedCapabilities."
}
&lt;/result></path><content>&lt;result>AssertionFailures: INSPIRE ResourceType exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-ft-MetadataURL: INSPIRE Each FeatureType has a MetadataURL" id="13b0e9a4-22d9-424a-a307-bf0f5282b2a2"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
for $featureType in //wfs:FeatureType
where string-length($featureType/wfs:MetadataURL/@xlink:href)=0
return
concat ("FeatureType: ",$featureType/wfs:Name," has no MetadataURL.")
}
&lt;/result></path><content>&lt;result>AssertionFailures: &lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-SpatialDataServiceType: INSPIRE SpatialDataServiceType is set at 'download'" id="4322d981-b8a6-4064-a080-713f260d2d1e"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//inspire_dls:ExtendedCapabilities/inspire_common:SpatialDataServiceType[.='download']
return
if (exists($value))
then "INSPIRE SpatialDataServiceType is set at 'download'."
else "INSPIRE SpatialDataServiceType is NOT set at 'download'. Check the ExtendedCapabilities."
}
&lt;/result></path><content>&lt;result>AssertionFailures: INSPIRE SpatialDataServiceType is set at 'download'.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-WGS84BoundingBox: WFS Each FeatureType has a WGS84BoundingBox" id="1360ac22-4cb0-4bef-be67-41b1627f1d43"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
for $featureType in //wfs:FeatureType
where string-length($featureType/ows:WGS84BoundingBox/ows:LowerCorner)=0
return
concat ("FeatureType: ",$featureType/wfs:Name," has no WGS84BoundingBox.")
}
&lt;/result></path><content>&lt;result>AssertionFailures: &lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-TemporalReference: INSPIRE TemporalReference exists" id="b4a97dd6-a6c5-44a4-af38-204539a16a8a"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//inspire_dls:ExtendedCapabilities/inspire_common:TemporalReference
return
if (exists($value))
then "INSPIRE TemporalReference exists."
else "INSPIRE TemporalReference does not exist.Check the ExtendedCapabilities for this element."
}
&lt;/result></path><content>&lt;result>AssertionFailures: INSPIRE TemporalReference exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-Conformity: INSPIRE Conformity exists" id="0cb55732-701a-4ac4-87be-b7e1568368d3"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//inspire_dls:ExtendedCapabilities/inspire_common:Conformity
return
if (exists($value))
then "INSPIRE Conformity exists."
else "INSPIRE Conformity does not exist. Check the ExtendedCapabilities for this element."
}
&lt;/result></path><content>&lt;result>AssertionFailures: INSPIRE Conformity exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-Fees: WFS Fees exists" id="2cf5f54c-2d70-4165-8ce5-370491ce3a27"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//ows:ServiceIdentification/ows:Fees
return
if (exists($value))
then "WFS Fees exists."
else "WFS Fees does not exist. Check the Capabilities for this element."
}
&lt;/result></path><content>&lt;result>AssertionFailures: WFS Fees exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-AccessConstraints: WFS AccessConstraints exists" id="25a32430-5356-41b2-9f6e-6d2a0e13f4c2"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//ows:ServiceIdentification/ows:AccessConstraints
return
if (exists($value))
then "WFS AccessConstraints exists."
else "WFS AccessConstraints does not exist. Check the Capabilities for this element."
}
&lt;/result></path><content>&lt;result>AssertionFailures: WFS AccessConstraints exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-ContactInfo: WFS ServiceProvider exists, at least a ServiceContact with ContactInfo" id="26cc2c13-3ff7-4296-9633-399119c26107"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//ows:ServiceProvider/ows:ServiceContact/ows:ContactInfo
return
if (exists($value))
then "WFS ServiceProvider ContactInfo exists."
else "WFS ServiceProvider ContactInfo does not exist. Check the Capabilities for this element."
}
&lt;/result></path><content>&lt;result>AssertionFailures: WFS ServiceProvider ContactInfo exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-ProviderName: WFS ServiceProvider exists, with ProviderName" id="c6de782c-0857-4252-ad3e-f1118a8a9963"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//ows:ServiceProvider/ows:ProviderName
return
if (exists($value))
then "WFS ServiceProvider ProviderName exists."
else "WFS ServiceProvider ProviderName does not exist. Check the Capabilities for this element."
}
&lt;/result></path><content>&lt;result>AssertionFailures: WFS ServiceProvider ProviderName exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-MetadataDate: INSPIRE MetadataDate exists" id="aa6f1482-3bd0-4115-ad9f-98703b504671"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//inspire_dls:ExtendedCapabilities/inspire_common:MetadataDate
return
if (string-length($value)=0)
then "INSPIRE MetadataDate exists."
else "INSPIRE MetadataDate does not exist. Check the ExtendedCapabilities for this element."
}
&lt;/result></path><content>&lt;result>AssertionFailures: INSPIRE MetadataDate exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-MetadataPointOfContact: INSPIRE MetadataPointOfContact exists" id="3b27c121-74eb-4b0b-b12f-f04d95994eb2"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//inspire_dls:ExtendedCapabilities/inspire_common:MetadataPointOfContact
return
if (exists($value))
then "INSPIRE MetadataPointOfContact exists."
else "INSPIRE MetadataPointOfContact does not exist. Check the ExtendedCapabilities for this element."
}
&lt;/result></path><content>&lt;result>AssertionFailures: INSPIRE MetadataPointOfContact exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-URI: INSPIRE Unique Resource Identifier exists" id="4380f284-e91c-4420-9c1b-8c674f279589"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace xsi='http://www.w3.org/2001/XMLSchema-instance';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

&lt;result>AssertionFailures: {
let $value:=//inspire_dls:ExtendedCapabilities/inspire_common:SpatialDataSet/inspire_common:UniqueResourceIdentifier
return
if (exists($value))
then "INSPIRE Unique Resource Identifier exists."
else "INSPIRE Unique Resource Identifier does not exist for a SpatialDataSet. Check the ExtendedCapabilities for this element."
}
&lt;/result></path><content>&lt;result>AssertionFailures: INSPIRE Unique Resource Identifier exists.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="groovy" name="RunMetadataDatasetTest" id="4351fa99-ef24-4c69-ab8d-73ad68f60a34"><con:settings/><con:config><script>import de.interactive_instruments.xtf.*;
SOAPUI_I.init(log,context,testRunner);

ProjectHelper ph = new ProjectHelper();
def capsXmlHolder = ph.getTransferPropertyAsXml("Capabilities")

//Pull out the metadataURLs
def metadataUrlNodes = capsXmlHolder.getNodeValues("//*:MetadataURL/@*:href");
log.info("metadataUrlNodes: " + metadataUrlNodes);

// clear url to test
ph.setTransferProperty("urlToTest","")

// run GetMetadata test for each url
for( url in metadataUrlNodes ) {
   ph.setTransferProperty("urlToTest",url)
   ph.runTestStep("GetMetadata")
}</script></con:config></con:testStep><con:testStep type="httprequest" name="GetMetadata" id="f546bbf7-bebb-4619-96e4-1f9e5fb146ad"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetMetadata" id="352ed322-02ab-42a5-95b3-0d76f30dd6da" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#urlToTest}</con:endpoint><con:request/><con:assertion type="XPath Match" name="M-01##M-01-MD_Identifier: The MD_Identifier exists in the Metadata" id="f290e535-4226-4b13-b1a4-498ff501122d" disabled="true"><con:configuration><path>declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace gco='http://www.isotc211.org/2005/gco';

contains('${#Project#MdIdentifiersList}',//gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreOrder>false</ignoreOrder><acceptValidXPath>false</acceptValidXPath></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-MD_Metadata: Metadata has root element MD_Metadata" id="70de6a40-93cf-4d0f-b264-8321651d1213"><con:configuration><path><![CDATA[declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace csw='http://www.opengis.net/cat/csw/2.0.2';

<result>AssertionFailures: {
let $value:=//gmd:MD_Metadata
return
if (exists($value))
then "the dataset metadata has an ISO Metadata root element (gmd:Metadata exists). URL: '${#urlToTest.replace("&","&amp;")}'"
else "the referred dataset Metadata document does not seem to be ISO Metadata. It does not have an XML element gmd:Metadata. Check the URL in the MetadataURL of the layer. URL: '${#urlToTes.replace("&","&amp;")}'"
}
</result>]]></path><content>&lt;result>AssertionFailures: the dataset metadata has an ISO Metadata root element (gmd:Metadata exists). URL: '${#urlToTest.replace("&amp;","&amp;amp;")}'&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-MD_fileIdentifier: Metadata fileIdentifier exists" id="490c6e82-46b7-4822-b820-57528321e08b"><con:configuration><path>declare namespace gmd='http://www.isotc211.org/2005/gmd';

&lt;result>AssertionFailures: {
let $fileIdentifier:=//gmd:MD_Metadata/gmd:fileIdentifier
return
if (string-length($fileIdentifier)=0)
then "there is no fileIdentifier defined in the Metadata."
else "the Metadata contains a fileIdentifier."
}
&lt;/result></path><content>&lt;result>AssertionFailures: the Metadata contains a fileIdentifier.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="goto" name="Conditional Goto Skip Scenario 1" id="60466157-968a-4965-adf0-a240688f3f0b"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>SkipScenario1</con:name><con:type>XPATH</con:type><con:expression>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace inspire_dls='http://inspire.ec.europa.eu/schemas/inspire_dls/1.0';
declare namespace inspire_common='http://inspire.ec.europa.eu/schemas/common/1.0';

empty(//inspire_dls:ExtendedCapabilities/inspire_common:MetadataUrl/inspire_common:URL)</con:expression><con:targetStep>Property Transfer (Finish Goto)</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="httprequest" name="Req 42 (Scenario 1) ExternalServiceMetadata" id="b313b52d-b03c-4861-8c7a-3f7b058e3e9f"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="Req 42 (Scenario 1) ExternalServiceMetadata" id="28b7e82a-bda9-4e15-b5bb-e6503921a534" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint xsi:nil="true"/><con:request/><con:assertion type="Simple Schema Validator" name="M-01##M-01-ServiceMD-validates: ISO Metadata XSD validation" disabled="true" id="a3b53c4e-f5f2-4bff-8dad-8d7ec5bc493b"><con:configuration><pathToXSD>http://www.opengis.net/cat/csw/2.0.2 http://schemas.opengis.net/csw/2.0.2/CSW-discovery.xsd http://www.isotc211.org/2005/gmd http://schemas.opengis.net/iso/19139/20060504/gmd/gmd.xsd http://www.isotc211.org/2005/srv http://schemas.opengis.net/iso/19139/20060504/srv/srv.xsd</pathToXSD></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-ServiceMD_MD_Metadata: Metadata has ISO Metadata Root element (gmd_MD_Metadata exists)" id="6fe3befb-79f7-40bd-9128-094078adb74a"><con:configuration><path><![CDATA[declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace csw='http://www.opengis.net/cat/csw/2.0.2';

<result>AssertionFailures: {
let $value:=//gmd:MD_Metadata
return
if (exists($value))
then "the dataset metadata has an ISO Metadata root element (gmd:Metadata exists). URL: '${#urlToTest.replace("&","&amp;")}'"
else "the referred dataset Metadata document does not seem to be ISO Metadata. It does not have an XML element gmd:Metadata. Check the URL in the MetadataURL of the layer. URL: '${#urlToTes.replace("&","&amp;")}'"
}
</result>]]></path><content>&lt;result>AssertionFailures: the dataset metadata has an ISO Metadata root element (gmd:Metadata exists). URL: '${#urlToTest.replace("&amp;","&amp;amp;")}'&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-ServiceMD_coupledResource: Metadata contains a coupled resource (srv:operatesOn)" id="bc70f94a-5889-4aa2-b803-854511e5d752"><con:configuration><path>declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace csw='http://www.opengis.net/cat/csw/2.0.2';
declare namespace srv='http://www.isotc211.org/2005/srv';

&lt;result>AssertionFailures: {
let $value:=//gmd:MD_Metadata/gmd:identificationInfo/srv:SV_ServiceIdentification/srv:operatesOn
return
if (exists($value))
then ""
else "The metadata of the WFS does not contain any coupled resource (srv:operatesOn)"
}
&lt;/result></path><content>&lt;result>AssertionFailures: &lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-ServiceMD_coupledResourceHref: srv:operatesOn contains a reference to a metadata document" id="859c30f3-950d-466c-9c14-d9ec0a2a5772"><con:configuration><path>declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace csw='http://www.opengis.net/cat/csw/2.0.2';
declare namespace srv='http://www.isotc211.org/2005/srv';
declare namespace xlink='http://www.w3.org/1999/xlink';

&lt;result>AssertionFailures: {
for $operatesOn in //gmd:MD_Metadata/gmd:identificationInfo/srv:SV_ServiceIdentification/srv:operatesOn
where (empty($operatesOn/@xlink:href))
return
concat ("The element srv:operatesOn with the attribute uuidref: ", $operatesOn/@uuidref, " in the metadata of the WFS has no xlink:href attribute. It does not refer to a metadata document.")
}
&lt;/result></path><content>&lt;result>AssertionFailures: &lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Metadata Identifiers" id="58d868ca-039e-4cc5-b655-caf8eadef48c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="true" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>datasetIdentifiersOperatesOn</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Req 42 (Scenario 1) ExternalServiceMetadata</con:sourceStep><con:sourcePath>declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace srv='http://www.isotc211.org/2005/srv';
declare namespace gco='http://www.isotc211.org/2005/gco';
string-join(//srv:operatesOn/@uuidref,',')</con:sourcePath><con:targetType>datasetIdentifiersList</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false"><con:name>ServiceMetadataRecord</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Req 42 (Scenario 1) ExternalServiceMetadata</con:sourceStep><con:sourcePath/><con:targetType>ServiceMetadataRecord</con:targetType><con:targetStep>Transfer_Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="RunMetadataDatasetFromServiceMetadata" id="3c74fa68-1478-4a04-9b0e-72e8ca3a8aa7"><con:settings/><con:config><script>import de.interactive_instruments.xtf.*;
SOAPUI_I.init(log,context,testRunner);
// props = testRunner.testCase.testSteps['Properties']
// log.info("Caps: " + props.getPropertyValue("Capabilities"))
ProjectHelper ph = new ProjectHelper();
def serviceMDXmlHolder = ph.getTransferPropertyAsXml("ServiceMetadataRecord")

//Pull out the metadataURLs
def metadataUrlNodes = serviceMDXmlHolder.getNodeValues("//*:operatesOn/@*:href");
log.info("metadataUrlNodes: " + metadataUrlNodes);

// clear url to test
ph.setTransferProperty("urlToTest","")

// run GetMetadata test for each url
for( url in metadataUrlNodes ) {
   url=url.replaceAll("%7B","{")
   url=url.replaceAll("%7D","}")

   ph.setTransferProperty("urlToTest",url)
   ph.runTestStep("GetMetadataDatasetFromServiceMetadata")
}

testRunner.gotoStepByName("Property Transfer (Finish Goto)");
</script></con:config></con:testStep><con:testStep type="httprequest" name="GetMetadataDatasetFromServiceMetadata" id="da4394fa-c719-4018-8667-97114bf17cb1"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetMetadataDatasetFromServiceMetadata" id="86644369-1702-4897-850f-0c12c6a69d2d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#urlToTest}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="M-01##M-01-MD_Metadata2: Metadata has root element MD_Metadata" id="f9d73158-df14-4818-86b3-fe04649351ca"><con:configuration><path><![CDATA[declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace csw='http://www.opengis.net/cat/csw/2.0.2';

<result>AssertionFailures: {
let $value:=//gmd:MD_Metadata
return
if (exists($value))
then "the dataset metadata has an ISO Metadata root element (gmd:Metadata exists). URL: '${#urlToTest.replace("&","&amp;")}'"
else "the referred dataset Metadata document does not seem to be ISO Metadata. It does not have an XML element gmd:Metadata. Check the URL in the MetadataURL of the layer. URL: '${#urlToTes.replace("&","&amp;")}'"
}
</result>]]></path><content>&lt;result>AssertionFailures: the dataset metadata has an ISO Metadata root element (gmd:Metadata exists). URL: '${#urlToTest.replace("&amp;","&amp;amp;")}'&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-MD_fileIdentifier2: Metadata fileIdentifier exists" id="10eb5c7d-a54b-4deb-be5b-f42d1ba1bba9"><con:configuration><path>declare namespace gmd='http://www.isotc211.org/2005/gmd';

&lt;result>AssertionFailures: {
let $fileIdentifier:=//gmd:MD_Metadata/gmd:fileIdentifier
return
if (exists($fileIdentifier))
then "the Metadata contains a fileIdentifier."
else "there is no fileIdentifier defined in the Metadata."
}
&lt;/result></path><content>&lt;result>AssertionFailures: the Metadata contains a fileIdentifier.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="M-01##M-01-MD_identifierInServiceMD: The MD_Identifier exists in the ServiceMetadata" id="d8451cb4-b339-474c-9a3d-2ca52af5333d"><con:configuration><path>declare namespace gmd='http://www.isotc211.org/2005/gmd';
declare namespace gco='http://www.isotc211.org/2005/gco';

&lt;result>AssertionFailures: {
let $id:=//gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString
return
if (contains('${#Project#datasetIdentifiersList}', $id))
then "the MD_Identifier exists in the Service metadata."
else concat("the MD_Identifier ",$id," does not exist in the service metadata. The MD_identifier is found in the metadata document at URL: '${#urlToTest.replace("&amp;","&amp;amp;")}'. The service metadata refers to these identifiers: '${#Project#datasetIdentifiersList}'")
}
&lt;/result></path><content>&lt;result>AssertionFailures: the MD_Identifier exists in the Service metadata.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer (Finish Goto)" id="cee141cc-c40a-4418-9246-01d0438b44ce"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetCapabilities</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>M-01##M-01-infoFeatureAccessService###M-01##M-01-WFSTitle###M-01##M-01-WFSAbstract###M-01##M-01-ResourceType###M-01##M-01-ResourceLocator###M-01##M-01-ft-MetadataURL###M-01##M-01-SpatialDataServiceType###M-01##M-01-WGS84BoundingBox###M-01##M-01-TemporalReference###M-01##M-01-Conformity###M-01##M-01-Fees###M-01##M-01-AccessConstraints###M-01##M-01-ContactInfo###M-01##M-01-ProviderName###M-01##M-01-MetadataDate###M-01##M-01-MetadataPointOfContact###M-01##M-01-URI###M-01##M-01-MD_Identifier###M-01##M-01-MD_Metadata###M-01##M-01-MD_fileIdentifier###M-01##M-01-ServiceMD-validates###M-01##M-01-ServiceMD_MD_Metadata###M-01##M-01-ServiceMD_coupledResource###M-01##M-01-MD_Metadata2###M-01##M-01-MD_fileIdentifier2###M-01##M-01-MD_identifierInServiceMD</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite name="O-02 - DirectAccessWFS" id="98a9a6b3-8819-40a1-98e0-5b9bd60b4237"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BasicWFS - GetFeature and GetPropertyValue- Optional" searchProperties="true" id="2f38ce68-97d2-4426-a8eb-f12fafcf60dd"><con:settings/><con:testStep type="properties" name="Properties" id="724a0395-4caa-471c-bd40-5b0164a950aa"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>typeNames</con:name><con:value/></con:property><con:property><con:name>GetFeatureURL</con:name><con:value/></con:property><con:property><con:name>PropertyValueURL</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="GetCapabilities" id="e4e3ad83-c8dd-453b-8396-25c36397bf65"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="d673fb9e-a327-4894-b742-256700992a14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##O-02-ImplementsBasicWFS: ImplementsBasicWFS Declared" id="e4f67499-40f6-4879-8795-ddaf44f7310a"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';

&lt;result>AssertionFailures: {
let $value:=//ows:Constraint[@name='ImplementsBasicWFS' and ./ows:DefaultValue='TRUE']
return
if (exists($value))
then "ImplementsBasicWFS is declared."
else "The ows:Constraint ImplementsBasicWFS is not advertized in the Capabilities."
}
&lt;/result></path><content>&lt;result>AssertionFailures: ImplementsBasicWFS is declared.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="a2ca2323-2146-42bd-babf-00a2c63b23b8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>typeNames</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';

(//wfs:FeatureTypeList/wfs:FeatureType[not(contains(',${#Project#excludeFeatureTypes},',concat(',',./wfs:Name,',')))]/wfs:Name)[1]</con:sourcePath><con:targetType>typeNames</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false"><con:name>GetFeatureURL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';

//ows:Operation[@name='GetFeature'][1]/ows:DCP/ows:HTTP/ows:Get/@xlink:href</con:sourcePath><con:targetType>GetFeatureURL</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>PropertyValueURL</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetCapabilities</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';

//ows:Operation[@name='GetPropertyValue'][1]/ows:DCP/ows:HTTP/ows:Get/@xlink:href</con:sourcePath><con:targetType>GetPropertyValueURL</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="GetFeature" id="7d69b48c-7e7a-448c-8c69-973a2ee1f532"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetFeature" id="de62db88-d962-4e9b-9ffc-553508d5e1d9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#GetFeatureURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" name="Response SLA" id="dfda121e-38b0-4f89-a019-11b5c766f975"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetFeature</con:value></con:parameter><con:parameter><con:name>storedquery_id</con:name><con:value>urn:ogc:def:query:OGC-WFS::GetFeatureById</con:value></con:parameter><con:parameter><con:name>typeNames</con:name><con:value>${#TestSuite#typeNames}</con:value></con:parameter><con:parameter><con:name>count</con:name><con:value>1</con:value></con:parameter><con:parameter><con:name>id</con:name><con:value>${#Project#FirstFeatureId}</con:value></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Valuereference" id="2b8718b0-679b-4e5c-85ec-aff08b5121fc"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false" transferToAll="false"><con:name>ValueReferenceFromFeature</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetFeature</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace gml='http://www.opengis.net/gml/3.2';

local-name((//*[namespace-uri(.)!='http://www.opengis.net/gml/3.2' and namespace-uri(.)!='urn:x-inspire:specification:gmlas:BaseTypes:3.2' and string-length(.)>0 and not(./*)])[1])
</con:sourcePath><con:targetType>valuereference</con:targetType><con:targetStep>GetPropertyValue</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>Namespaces</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetFeature</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace gml='http://www.opengis.net/gml/3.2';

concat('xmlns(',substring-before(name((//*[namespace-uri(.)!='http://www.opengis.net/gml/3.2' and namespace-uri(.)!='urn:x-inspire:specification:gmlas:BaseTypes:3.2' and string-length(.)>0 and not(./*)])[1]),concat(':',local-name((//*[namespace-uri(.)!='http://www.opengis.net/gml/3.2' and namespace-uri(.)!='urn:x-inspire:specification:gmlas:BaseTypes:3.2' and string-length(.)>0 and not(./*)])[1]))),',',namespace-uri((//*[namespace-uri(.)!='http://www.opengis.net/gml/3.2' and namespace-uri(.)!='urn:x-inspire:specification:gmlas:BaseTypes:3.2' and string-length(.)>0 and not(./*)])[1]),')')
</con:sourcePath><con:targetType>namespaces</con:targetType><con:targetStep>GetPropertyValue</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>FirstTextualProperty</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetFeature</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace gml='http://www.opengis.net/gml/3.2';

local-name((//*[namespace-uri(.)!='http://www.opengis.net/gml/3.2' and namespace-uri(.)!='urn:x-inspire:specification:gmlas:BaseTypes:3.2' and string-length(.)>0 and not(./*)])[1])</con:sourcePath><con:targetType>FirstTextualProperty</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>NamespacesAssertion</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetFeature</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace gml='http://www.opengis.net/gml/3.2';

namespace-uri((//*[namespace-uri(.)!='http://www.opengis.net/gml/3.2' and namespace-uri(.)!='urn:x-inspire:specification:gmlas:BaseTypes:3.2' and string-length(.)>0 and not(./*)])[1])</con:sourcePath><con:targetType>FeatureTypeNamespace</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>NamespacePrefix</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetFeature</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace xlink='http://www.w3.org/1999/xlink';
declare namespace gml='http://www.opengis.net/gml/3.2';

substring-before(name((//*[namespace-uri(.)!='http://www.opengis.net/gml/3.2' and namespace-uri(.)!='urn:x-inspire:specification:gmlas:BaseTypes:3.2' and string-length(.)>0 and not(./*)])[1]),concat(':',local-name((//*[namespace-uri(.)!='http://www.opengis.net/gml/3.2' and namespace-uri(.)!='urn:x-inspire:specification:gmlas:BaseTypes:3.2' and string-length(.)>0 and not(./*)])[1])))</con:sourcePath><con:targetType>FeatureTypeNamespacePrefix</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="GetPropertyValue" id="de31a0d7-3547-48be-ac3a-b95c263ffd86"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetPropertyValue" id="613c83e7-cb3c-4fa3-8db1-f74a89317725" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#GetPropertyValueURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##GetPropValue: GetPropertyValue response contains a ValueCollection" id="aa750cee-91c0-4685-b619-7b4753cb0b63"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';

&lt;result>AssertionFailures: {
let $value:=/wfs:ValueCollection
return
if (exists($value))
then "GetPropertyValue response contains a ValueCollection."
else "The GetPropertyValue response does not contain a ValueCollection."
}
&lt;/result></path><content>&lt;result>AssertionFailures: GetPropertyValue response contains a ValueCollection.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>valuereference</con:name><con:value>${#TestSuite#FirstTextualProperty}</con:value></con:parameter><con:parameter><con:name>namespaces</con:name><con:value/></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetPropertyValue</con:value></con:parameter><con:parameter><con:name>storedquery_id</con:name><con:value>urn:ogc:def:query:OGC-WFS::GetFeatureById</con:value></con:parameter><con:parameter><con:name>typeNames</con:name><con:value>${#TestSuite#typeNames}</con:value></con:parameter><con:parameter><con:name>count</con:name><con:value>10</con:value></con:parameter><con:parameter><con:name>ID</con:name><con:value>${#Project#FirstFeatureId}</con:value></con:parameter></con:parameters></con:config></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetPropertyValue</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>O-02##GetPropValue###O-02##O-02-ImplementsBasicWFS</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BasicWFS - Minimum Spatial Filter - Optional" searchProperties="true" id="167cf4ae-ca58-4597-8976-6eb5f70114d6"><con:description>This test checks if the BBOX filter is advertized in the Capabilities. A more profound test, checking correctness of the execution of a BBOX filter, is out of scope. This requires knowledge of the data offered by the WFS</con:description><con:settings/><con:testStep type="properties" name="Properties" id="e5c754b4-b039-4fb6-acd9-8a43f89f450a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Capabilities</con:name><con:value/></con:property><con:property><con:name>typeNames</con:name><con:value/></con:property><con:property><con:name>GetFeatureURL</con:name><con:value/></con:property><con:property><con:name>FeatureTypeBBOX</con:name><con:value/></con:property><con:property><con:name>FeatureIdBBOX1</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="GetCapabilities" id="2521a256-70c7-455c-9081-f75aa4dde1e7"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="b5c12062-3e74-4ba3-ae7a-fe12f535f5cd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##O-02-SpatialOperatorBBOX: SpatialOperator BBOX Declared" id="3158774b-e8c4-4024-bf77-57d152c9a2ae"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $value:=//fes:SpatialOperator[@name='BBOX']
return
if (exists($value))
then "SpatialOperator BBOX is declared."
else "The SpatialOperator BBOX is not declared in the Capabilities."
}
&lt;/result></path><content>&lt;result>AssertionFailures: SpatialOperator BBOX is declared.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter></con:parameters></con:config></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetCapabilities</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>O-02##O-02-SpatialOperatorBBOX</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Resource Identification and Ad Hoc Query - Optional" searchProperties="true" id="52d57777-f3b8-417f-b360-82321014a96a"><con:settings/><con:testStep type="httprequest" name="GetCapabilities" id="064e49be-1f64-4532-bdde-c7ef1008a1e2"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="dcf67a2c-b73a-4bd1-9ba2-56eb4b68ab6f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##O-02-ResourceIdentification: Capabilities advertizes fes:ResourceId (ResourceIdentification)" id="8df0ddf7-56d2-4222-b083-b1d936158014"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $value:=//fes:Id_Capabilities/fes:ResourceIdentifier[@name='fes:ResourceId']
return
if (exists($value))
then "Capabilities advertizes fes:ResourceId (ResourceIdentification)."
else "The Capabilities does not advertize fes:ResourceId for ResourceIdentification"
}
&lt;/result></path><content>&lt;result>AssertionFailures: Capabilities advertizes fes:ResourceId (ResourceIdentification).&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter><con:parameter><con:name>NAMESPACES</con:name></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GetFeatureWithNon-ExistingResourceId" id="26530ab7-e473-4d97-82b9-a2a4b77683bc"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetFeatureWithNon-ExistingResourceId" id="f9c64157-cfff-44b9-8d83-f21147caff2b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#GetFeatureURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##O-02-GetFeatureFalseID: Response with non-existing identifier does not contain any Features (wfs:member)" id="0de48582-2dfc-4d44-a694-fe85378f18a5"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $value:=count(//wfs:member)
return
if ($value=0)
then "Response with non-existing identifier does not contain any Features (wfs:member)."
else "The response of a GetFeature request with a non-existing identifier returns a wfs:member. It should hev been empty."
}
&lt;/result></path><content>&lt;result>AssertionFailures: Response with non-existing identifier does not contain any Features (wfs:member).&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetFeature</con:value></con:parameter><con:parameter><con:name>resourceid</con:name><con:value>nonexistingidentifier1234567890</con:value></con:parameter><con:parameter><con:name>typeNames</con:name><con:value>${#TestSuite#typeNames}</con:value></con:parameter><con:parameter><con:name>count</con:name><con:value>2</con:value></con:parameter></con:parameters></con:config></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetCapabilities</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>O-02##O-02-ResourceIdentification###O-02##O-02-GetFeatureFalseID</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Minimum Standard Filter - Optional" searchProperties="true" id="2868fd59-7315-491c-b3da-54927a7c338e"><con:settings/><con:testStep type="httprequest" name="GetCapabilities" id="c0379625-c1a1-457d-b459-94ef5f7a5804"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="55456980-802e-4b71-ada5-aadd44ce28ab" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##O-02-ImplementsMinStandardFilter: Capabilities advertize ImplementsMinStandardFilter" id="13a56bba-09dc-47ad-9998-9517e5ae1eb9"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $value:=//fes:Constraint[@name='ImplementsMinStandardFilter']/ows:DefaultValue[.='TRUE']
return
if (exists($value))
then "Capabilities advertizes ImplementsMinStandardFilter."
else "Capabilities does NOT advertize ImplementsMinStandardFilter."
}
&lt;/result></path><content>&lt;result>AssertionFailures: Capabilities advertizes ImplementsMinStandardFilter.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="O-02##O-02-ComparisonOperators: Capabilities advertize all ComparisonOperators: PropertyIsEqualTo, PropertyIsNotEqualTo, PropertyIsLessThan, PropertyIsGreaterThan, PropertyIsLessThanOrEqualTo, PropertyIsGreaterThanOrEqualTo" id="2598ac17-3805-4aba-aeb7-29ad8c43bb96"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $mandatoryOperators := ('PropertyIsEqualTo','PropertyIsNotEqualTo','PropertyIsLessThan','PropertyIsGreaterThan','PropertyIsLessThanOrEqualTo','PropertyIsGreaterThanOrEqualTo')
for $comparisonOperator in $mandatoryOperators
where empty(//fes:Scalar_Capabilities/fes:ComparisonOperators/fes:ComparisonOperator[@name=$comparisonOperator])
return
concat("Operator ",$comparisonOperator," is not advertized.")
}
&lt;/result></path><content>&lt;result>AssertionFailures: &lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:assertion type="XQuery Match" name="O-02##O-02-LogicalOperators: Capabilities advertize logical operators" id="fda77102-0430-4821-a12d-3df45a9cb9c0"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $value:=//fes:Scalar_Capabilities/fes:LogicalOperators
return
if (exists($value))
then "Capabilities advertizes LogicalOperators."
else "Capabilities does NOT advertize LogicalOperators."
}
&lt;/result></path><content>&lt;result>AssertionFailures: Capabilities advertizes LogicalOperators.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter><con:parameter><con:name>NAMESPACES</con:name></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GetPropertyValue" id="0f6a112d-a4a4-49ed-93e4-051867d3392b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetPropertyValue" id="e19f169d-f475-45d6-bafd-98e8a7c87f86" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#GetPropertyValueURL}</con:endpoint><con:request/><con:assertion type="Response SLA Assertion" name="Response SLA" id="b24d57b3-ab3a-44ef-8ed9-bcd8068cfbcc"><con:configuration><SLA>30000</SLA></con:configuration></con:assertion><con:assertion type="XQuery Match" name="O-02##O-02-GetPropertyValue: returns a ValueCollection with values " id="8b64c04e-b6ad-4ec4-a6cd-e40af2c401b8"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $value:=//wfs:member
return
if (exists($value))
then ""
else "GetPropertyValue does not return a ValueCollection with values"
}
&lt;/result></path><content>&lt;result>AssertionFailures: &lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetPropertyValue</con:value></con:parameter><con:parameter><con:name>typeNames</con:name><con:value>${#TestSuite#typeNames}</con:value></con:parameter><con:parameter><con:name>valuereference</con:name><con:value>${#TestSuite#FeatureTypeNamespacePrefix}:${#TestSuite#FirstTextualProperty}</con:value></con:parameter><con:parameter><con:name>count</con:name><con:value>2</con:value></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="cfcd4da2-e5c4-47fb-b596-057dde4a2869"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>FirstValue</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GetPropertyValue</con:sourceStep><con:sourcePath>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';

//wfs:member[1]/*[1]</con:sourcePath><con:targetType>FirstValue</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="httprequest" name="GetFeatureWithPropertyIsEqualTo" id="e7b1704b-295e-49a6-933d-cfee91992293"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetFeatureWithPropertyIsEqualTo" id="54a98628-fcc2-4453-bd1b-35240ee18160" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#GetFeatureURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##O-02-PropertyIsEqualTo: PropertyIsEqualTo works correctly: response contains only Features of which the first textual property contains the requested value of PropertyIsEqualTo" id="f9945f5f-2b8e-4bf3-9036-eda23417102a"><con:configuration><path>declare namespace wfs ='http://www.opengis.net/wfs/2.0';
declare namespace gml ='http://www.opengis.net/gml/3.2';
declare namespace ad  ='urn:x-inspire:specification:gmlas:Addresses:3.0';
declare namespace au  ='urn:x-inspire:specification:gmlas:AdministrativeUnits:3.0';
declare namespace base='urn:x-inspire:specification:gmlas:BaseTypes:3.2';
declare namespace cp  ='urn:x-inspire:specification:gmlas:CadastralParcels:3.0';
declare namespace gn  ='urn:x-inspire:specification:gmlas:GeographicalNames:3.0';
declare namespace hyn ='urn:x-inspire:specification:gmlas:HydroNetwork:3.0';
declare namespace hyp ='urn:x-inspire:specification:gmlas:HydroPhysicalWaters:3.0';
declare namespace hyr ='urn:x-inspire:specification:gmlas:HydroReporting:3.0';
declare namespace hy  ='urn:x-inspire:specification:gmlas:HydroBase:3.0';
declare namespace net ='urn:x-inspire:specification:gmlas:Network:3.2';
declare namespace ps  ='urn:x-inspire:specification:gmlas:ProtectedSites:3.0';
declare namespace tna ='urn:x-inspire:specification:gmlas:AirTransportNetwork:3.0';
declare namespace tnc ='urn:x-inspire:specification:gmlas:CableTransportNetwork:3.0';
declare namespace tnra='urn:x-inspire:specification:gmlas:RailwayTransportNetwork:3.0';
declare namespace tnro='urn:x-inspire:specification:gmlas:RoadTransportNetwork:3.0';
declare namespace tnw ='urn:x-inspire:specification:gmlas:WaterTransportNetwork:3.0';
declare namespace tn  ='urn:x-inspire:specification:gmlas:CommonTransportElements:3.0';
declare namespace ${#TestSuite#FeatureTypeNamespacePrefix}='${#TestSuite#FeatureTypeNamespace}';

&lt;result>AssertionFailures: {
let $value:=//wfs:member/${#TestSuite#typeNames}[${#TestSuite#FeatureTypeNamespacePrefix}:${#TestSuite#FirstTextualProperty}!='${#TestSuite#FirstValue}']
return
if (empty($value))
then "PropertyIsEqualTo works correctly: response contains only Features of which the first textual property contains the requested value of PropertyIsEqualTo."
else "PropertyIsEqualTo does not work correctly: the response contains features of which the first textual property ('${#TestSuite#FeatureTypeNamespacePrefix}:${#TestSuite#FirstTextualProperty}') is not the requested value of PropertyIsEqualTo ('${#TestSuite#FirstValue}')."
}
&lt;/result></path><content>&lt;result>AssertionFailures: PropertyIsEqualTo works correctly: response contains only Features of which the first textual property contains the requested value of PropertyIsEqualTo.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetFeature</con:value></con:parameter><con:parameter><con:name>typeNames</con:name><con:value>${#TestSuite#typeNames}</con:value></con:parameter><con:parameter><con:name>filter</con:name><con:value><![CDATA[<fes:Filter xmlns:fes="http://www.opengis.net/fes/2.0"><fes:PropertyIsEqualTo><fes:ValueReference>${#TestSuite#FeatureTypeNamespacePrefix}:${#TestSuite#FirstTextualProperty}</fes:ValueReference><fes:Literal>${#TestSuite#FirstValue}</fes:Literal></fes:PropertyIsEqualTo></fes:Filter>]]></con:value></con:parameter><con:parameter><con:name>count</con:name><con:value>5</con:value></con:parameter></con:parameters></con:config></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetFeatureWithPropertyIsEqualTo</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>O-02##O-02-ImplementsMinStandardFilter###O-02##O-02-ComparisonOperators###O-02##O-02-LogicalOperators###O-02##O-02-PropertyIsEqualTo</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Minimum Temporal Filter - Optional" searchProperties="true" id="315a4fbb-7970-42b4-a7d4-404a7fd5e54e"><con:settings/><con:testStep type="httprequest" name="GetCapabilities" id="ca816b58-4186-4b26-afbd-88bfacc0055a"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="98cfe3a0-ecce-4bb8-b867-b933924be610" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##O-02-MinTemporalFilter: Capabilities advertize ImplementsMinTemporalFilter" id="f86de989-cd3e-4b23-854d-775173f42e32"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $value:=//fes:Constraint[@name='ImplementsMinTemporalFilter']/ows:DefaultValue[.='TRUE']
return
if (exists($value))
then "Capabilities advertizes ImplementsMinTemporalFilter."
else "Capabilities does NOT advertize ImplementsMinTemporalFilter."
}
&lt;/result></path><content>&lt;result>AssertionFailures: Capabilities advertizes ImplementsMinTemporalFilter.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter><con:parameter><con:name>NAMESPACES</con:name></con:parameter></con:parameters></con:config></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetCapabilities</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>O-02##O-02-MinTemporalFilter</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Minimum XPath - Optional" searchProperties="true" id="dde630c5-f517-4dd6-9674-11638a37d6a6"><con:settings/><con:testStep type="httprequest" name="GetCapabilities" id="90f4959d-f116-4b7e-bf41-0b763ef5e039"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetCapabilities" id="bdc3ca08-855f-4056-ab2f-cb0dca1cc842" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#serviceEndpoint}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##XPathAdvertized: Capabilities advertize ImplementsMinimumXPath" id="d2c45549-a425-4194-a2ba-206baf9b9083"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ows='http://www.opengis.net/ows/1.1';
declare namespace fes='http://www.opengis.net/fes/2.0';

&lt;result>AssertionFailures: {
let $value:=//fes:Constraint[@name='ImplementsMinimumXPath']/ows:DefaultValue[.='TRUE']
return
if (exists($value))
then "Capabilities advertizes ImplementsMinimumXPath."
else "Capabilities does NOT advertize ImplementsMinimumXPath."
}
&lt;/result></path><content>&lt;result>AssertionFailures: Capabilities advertizes ImplementsMinimumXPath.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>ACCEPTVERSIONS</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetCapabilities</con:value></con:parameter><con:parameter><con:name>NAMESPACES</con:name></con:parameter></con:parameters></con:config></con:testStep><con:testStep type="httprequest" name="GetFeatureWithXPath" id="3f66cf85-8a9d-45ca-832f-17b95c40e4d0"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GetFeatureWithXPath" id="811ddd02-4bfc-4efe-b303-6db5451a587d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#GetFeatureURL}</con:endpoint><con:request/><con:assertion type="XQuery Match" name="O-02##XPath: XPath number predicate (./ns:property[1]) works correctly in Filter" id="9fea2eb0-8baa-44b5-b00c-2dc8f1f09906"><con:configuration><path>declare namespace wfs='http://www.opengis.net/wfs/2.0';
declare namespace gml='http://www.opengis.net/gml/3.2';
declare namespace ${#TestSuite#FeatureTypeNamespacePrefix}='${#TestSuite#FeatureTypeNamespace}';

&lt;result>AssertionFailures: {
let $value:=//wfs:member/${#TestSuite#typeNames}[${#TestSuite#FeatureTypeNamespacePrefix}:${#TestSuite#FirstTextualProperty}!='${#TestSuite#FirstValue}']
return
if (empty($value))
then "XPath number predicate (./ns:property[1]) works correctly in Filter."
else "XPath number predicate (./ns:property[1]) does not work correctly in Filter. Filtering ${#TestSuite#typeNames} 's property ${#TestSuite#FeatureTypeNamespacePrefix}:${#TestSuite#FirstTextualProperty} does not only include '${#TestSuite#FirstValue}'' "
}
&lt;/result></path><content>&lt;result>AssertionFailures: XPath number predicate (./ns:property[1]) works correctly in Filter.&lt;/result></content><allowWildcards>false</allowWildcards></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>VERSION</con:name><con:value>2.0.0</con:value></con:parameter><con:parameter><con:name>SERVICE</con:name><con:value>WFS</con:value></con:parameter><con:parameter><con:name>REQUEST</con:name><con:value>GetFeature</con:value></con:parameter><con:parameter><con:name>typeNames</con:name><con:value>${#TestSuite#typeNames}</con:value></con:parameter><con:parameter><con:name>filter</con:name><con:value><![CDATA[<fes:Filter xmlns:fes="http://www.opengis.net/fes/2.0"><fes:PropertyIsEqualTo><fes:ValueReference>./${#TestSuite#FeatureTypeNamespacePrefix}:${#TestSuite#FirstTextualProperty}[1]</fes:ValueReference><fes:Literal>${#TestSuite#FirstValue}</fes:Literal></fes:PropertyIsEqualTo></fes:Filter>]]></con:value></con:parameter><con:parameter><con:name>count</con:name><con:value>5</con:value></con:parameter></con:parameters></con:config></con:testStep><con:properties><con:property><con:name>MAIN_TESTSTEP</con:name><con:value>GetFeatureWithXPath</con:value></con:property><con:property><con:name>save_responses</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>traces_dir</con:name><con:value>../../../tmp/</con:value></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>O-02##XPathAdvertized###O-02##XPath</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>FirstTextualProperty</con:name><con:value/></con:property><con:property><con:name>typeNames</con:name><con:value/></con:property><con:property><con:name>GetPropertyValueURL</con:name><con:value/></con:property><con:property><con:name>FeatureTypeNamespace</con:name><con:value/></con:property><con:property><con:name>FeatureTypeNamespacePrefix</con:name><con:value/></con:property><con:property><con:name>FirstValue</con:name><con:value/></con:property><con:property><con:name>qaf.AssociatedRequirements</con:name><con:value>O-02###O-02##XP###O-02##GetPropValue###O-02##XP##XPath###O-02##XP##XPathAdvertized</con:value></con:property></con:properties></con:testSuite>
<con:properties>
  <con:property>
    <con:name>serviceEndpoint</con:name>
    <con:value>http://www.geoportal.lt/inspire-services/rest/services/ELF/ELF_Geographical_names/MapServer/exts/InspireFeatureDownload/service?SERVICE=WFS&amp;REQUEST=getCapabilities</con:value>
    </con:property>
    <con:property><con:name>excludeFeatureTypes</con:name><con:value/></con:property>





    <con:property>
      <con:name>featureTypeList</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>srsnamelist</con:name>
      <con:value>EPSG:4258,EPSG:4326</con:value>
    </con:property>











 <con:property><con:name>datasetIdentifiersList</con:name><con:value/></con:property><con:property><con:name>FirstFeature</con:name><con:value/></con:property><con:property><con:name>FirstFeatureId</con:name><con:value/></con:property><con:property><con:name>GetFeatureURL</con:name><con:value/></con:property><con:property><con:name>authUser</con:name><con:value/></con:property><con:property><con:name>authPwd</con:name><con:value/></con:property><con:property><con:name>etf.ignore.properties</con:name><con:value>authUser, authPwd, authMethod, FirstFeature, FirstFeatureId, GetFeatureURL, datasetIdentifiersList, featureTypeList,FirstFeatureTypeName</con:value></con:property><con:property><con:name>authMethod</con:name><con:value>basic</con:value></con:property><con:property><con:name>FirstFeatureTypeName</con:name><con:value/></con:property></con:properties>
 <con:afterLoadScript>
 </con:afterLoadScript>
 <con:wssContainer/>
 <con:oAuth2ProfileContainer/><con:afterRunScript>import com.eviware.soapui.impl.wsdl.teststeps.HttpTestRequestStep;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep
import com.eviware.soapui.model.testsuite.TestStepResult;


// Get the "requirements" test step
def requirements = project.getTestSuiteByName("TestSetup")?.
	getTestCaseByName("Requirements")?.getTestStepByName("Requirements");

log.info("Results: ");
for( testSuiteR in runner?.getResults() ) {
	for( testCaseR in testSuiteR?.getResults() ) {
		for( testStepR in testCaseR?.getResults() ) {

			if(testStepR.getStatus()!=TestStepResult.TestStepStatus.OK) {
				if (testStepR.testStep instanceof HttpTestRequestStep || testStepR.testStep instanceof  RestTestRequestStep) {
					testStepR.testStep.testRequest.assertionList.each{
						// Extract ID which is seperated with a whitespace and a doublecolon
						String assertionName = it.name;
						if (assertionName.indexOf(": ") > -1) {
							String id = assertionName?.substring( 0, assertionName.indexOf(": ") );
							if(it.valid) {
								log.info("Assertion "+assertionName+" passed");
							}else if(it.failed) {
								log.error("Assertion "+assertionName+" failed with error:");
								log.error("  -   "+it.getErrors()[0].getMessage());
								log.error("  -   Requirements:");

								// Todo: Save the requirements as an object in a map
								requirements.getPropertyList().each {
									log.info(it.getName())
									if(it.getName().contains(id)) {
										log.error("   -   "+it.getName()+" :" );
										log.error("        "+it.getValue());
									}
								}
							}else{
								log.warn("Assertion "+assertionName+" is deactivated");
							}
						}
					}
				}
			}
		}
	}
}
</con:afterRunScript>
    <con:sensitiveInformation/></con:soapui-project>
